{
  "openapi": "3.0.1",
  "info": {
    "title": "exida SILstat API",
    "description": "exSILentia Enterprise API provides programmatic access to the underlying data model for exSILentia SILstat and Dashboard.",
    "version": "2024-09-24-preview"
  },
  "servers": [
    {
      "url": "https://api.silstat.exsilentia.com/api"
    }
  ],
  "paths": {
    "/area/{id}/child/{childId}": {
      "delete": {
        "description": "This deletes a Parent Area by it's GUID.",
        "operationId": "DeleteAreaAreaEntity",
        "parameters": [
          {
            "description": "Parent Area ID to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Parent Area ID to delete"
          },
          {
            "description": "Child Area ID to delete",
            "in": "path",
            "name": "childId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Child Area ID to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Area Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Parent Entity",
        "tags": [
          "ParentArea"
        ]
      },
      "get": {
        "description": "Finds the Area Parent Entity by it's GUID",
        "operationId": "FindAreaChildById",
        "parameters": [
          {
            "description": "ID of the Area",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area ID"
          },
          {
            "description": "ID of the Child Area",
            "in": "path",
            "name": "childId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Child Area ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "New Parent Area details added",
            "x-ms-summary": "New Parent Area details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Area not found",
            "x-ms-summary": "Area not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Parent Area Entity by id",
        "tags": [
          "ParentArea"
        ]
      },
      "post": {
        "description": "This creates a new Parent Area",
        "operationId": "CreateAreaAreaEntity",
        "parameters": [
          {
            "description": "ID of the Parent",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Parent ID"
          },
          {
            "description": "ID of the Child (Area)",
            "in": "path",
            "name": "childId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Child (Area) ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Creates a new Parent",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "New Parent Area details added",
            "x-ms-summary": "New Parent Area details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Area not found",
            "x-ms-summary": "Area not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Parent Area",
        "tags": [
          "ParentArea"
        ]
      },
      "put": {
        "description": "This updates the Parent Area entity",
        "operationId": "UpdateAreaAreaEntity",
        "parameters": [
          {
            "description": "ID of the Parent",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Parent ID"
          },
          {
            "description": "Child (Area) ID of the Parent to be update",
            "in": "path",
            "name": "childId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Child (Area) ID of the Parent to be update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Area that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Update Parent Area details",
            "x-ms-summary": "Update Parent Area details"
          },
          "400": {
            "description": "Invalid GUID supplied",
            "x-ms-summary": "Invalid GUID supplied"
          },
          "404": {
            "description": "Parent Area not found",
            "x-ms-summary": "Parent Area not found"
          },
          "405": {
            "description": "Validation failed",
            "x-ms-summary": "Validation failed"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Parent Aera Entity",
        "tags": [
          "ParentArea"
        ]
      }
    },
    "/areadevicenodegroupings": {
      "get": {
        "description": "This returns the paginated results for Area Device Node Grouping Entity based on the OData Query Parameters.",
        "operationId": "QueryAreaDeviceNodeGrouping",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Device Node Grouping Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Area Device Node Grouping Entity",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      },
      "post": {
        "description": "This creates a new AreaDeviceNodeGrouping",
        "operationId": "CreateAreaDeviceNodeGrouping",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
              }
            }
          },
          "description": "Creates a new AreaDeviceNodeGrouping",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                }
              }
            },
            "description": "New AreaDeviceNodeGrouping details added",
            "x-ms-summary": "New AreaDeviceNodeGrouping details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "AreaDeviceNodeGrouping not found",
            "x-ms-summary": "AreaDeviceNodeGrouping not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new AreaDeviceNodeGrouping",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      }
    },
    "/areadevicenodegroupings/search/{languageCode}": {
      "get": {
        "description": "This searches the Area Device Node Grouping Entity",
        "operationId": "SearchAreaDeviceNodeGrouping",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Device Node Grouping Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Area Device Node Grouping Entity",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      }
    },
    "/areadevicenodegroupings/{id}": {
      "delete": {
        "description": "This deletes a(n) AreaDeviceNodeGrouping by it's GUID.",
        "operationId": "DeleteAreaDeviceNodeGrouping",
        "parameters": [
          {
            "description": "AreaDeviceNodeGrouping id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaDeviceNodeGrouping id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "AreaDeviceNodeGrouping Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      },
      "get": {
        "description": "Finds the Area Device Node Grouping Entity by it's GUID",
        "operationId": "FindAreaDeviceNodeGroupingById",
        "parameters": [
          {
            "description": "Id of the Area Device Node Grouping Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area Device Node Grouping Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Area Device Node Grouping Entity by id",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      },
      "put": {
        "description": "This updates the AreaDeviceNodeGrouping entity",
        "operationId": "UpdateAreaDeviceNodeGrouping",
        "parameters": [
          {
            "description": "Id of the AreaDeviceNodeGrouping to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaDeviceNodeGrouping id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
              }
            }
          },
          "description": "AreaDeviceNodeGrouping that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                }
              }
            },
            "description": "Update Area Device Node Grouping Entity details",
            "x-ms-summary": "Update AreaDeviceNodeGrouping details"
          },
          "404": {
            "description": "AreaDeviceNodeGrouping not found",
            "x-ms-summary": "AreaDeviceNodeGrouping not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "AreaDeviceNodeGrouping"
        ]
      }
    },
    "/areadevicenodes": {
      "get": {
        "description": "This returns the paginated results for Area Device Node Entity based on the OData Query Parameters.",
        "operationId": "QueryAreaDeviceNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaDeviceNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Device Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Area Device Node Entity",
        "tags": [
          "AreaDeviceNode"
        ]
      },
      "post": {
        "description": "This creates a new AreaDeviceNode",
        "operationId": "CreateAreaDeviceNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaDeviceNodeEntity"
              }
            }
          },
          "description": "Creates a new AreaDeviceNode",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeEntity"
                }
              }
            },
            "description": "New AreaDeviceNode details added",
            "x-ms-summary": "New AreaDeviceNode details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "AreaDeviceNode not found",
            "x-ms-summary": "AreaDeviceNode not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new AreaDeviceNode",
        "tags": [
          "AreaDeviceNode"
        ]
      }
    },
    "/areadevicenodes/search/{languageCode}": {
      "get": {
        "description": "This searches the Area Device Node Entity",
        "operationId": "SearchAreaDeviceNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaDeviceNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Device Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Area Device Node Entity",
        "tags": [
          "AreaDeviceNode"
        ]
      }
    },
    "/areadevicenodes/{id}": {
      "delete": {
        "description": "This deletes a(n) AreaDeviceNode by it's GUID.",
        "operationId": "DeleteAreaDeviceNode",
        "parameters": [
          {
            "description": "AreaDeviceNode id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaDeviceNode id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "AreaDeviceNode Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "AreaDeviceNode"
        ]
      },
      "get": {
        "description": "Finds the Area Device Node Entity by it's GUID",
        "operationId": "FindAreaDeviceNodeById",
        "parameters": [
          {
            "description": "Id of the Area Device Node Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area Device Node Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Area Device Node Entity by id",
        "tags": [
          "AreaDeviceNode"
        ]
      },
      "put": {
        "description": "This updates the AreaDeviceNode entity",
        "operationId": "UpdateAreaDeviceNode",
        "parameters": [
          {
            "description": "Id of the AreaDeviceNode to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaDeviceNode id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaDeviceNodeEntity"
              }
            }
          },
          "description": "AreaDeviceNode that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaDeviceNodeEntity"
                }
              }
            },
            "description": "Update Area Device Node Entity details",
            "x-ms-summary": "Update AreaDeviceNode details"
          },
          "404": {
            "description": "AreaDeviceNode not found",
            "x-ms-summary": "AreaDeviceNode not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "AreaDeviceNode"
        ]
      }
    },
    "/areahistories": {
      "get": {
        "description": "This returns the paginated results for Area History Entity based on the OData Query Parameters.",
        "operationId": "QueryAreaHistory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaHistoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area History Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Area History Entity",
        "tags": [
          "AreaHistory"
        ]
      },
      "post": {
        "description": "This creates a new AreaHistory",
        "operationId": "CreateAreaHistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaHistoryEntity"
              }
            }
          },
          "description": "Creates a new AreaHistory",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaHistoryEntity"
                }
              }
            },
            "description": "New AreaHistory details added",
            "x-ms-summary": "New AreaHistory details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "AreaHistory not found",
            "x-ms-summary": "AreaHistory not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new AreaHistory",
        "tags": [
          "AreaHistory"
        ]
      }
    },
    "/areahistories/search/{languageCode}": {
      "get": {
        "description": "This searches the Area History Entity",
        "operationId": "SearchAreaHistory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaHistoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area History Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Area History Entity",
        "tags": [
          "AreaHistory"
        ]
      }
    },
    "/areahistories/{id}": {
      "delete": {
        "description": "This deletes a(n) AreaHistory by it's GUID.",
        "operationId": "DeleteAreaHistory",
        "parameters": [
          {
            "description": "AreaHistory id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaHistory id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "AreaHistory Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "AreaHistory"
        ]
      },
      "get": {
        "description": "Finds the Area History Entity by it's GUID",
        "operationId": "FindAreaHistoryById",
        "parameters": [
          {
            "description": "Id of the Area History Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area History Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaHistoryEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Area History Entity by id",
        "tags": [
          "AreaHistory"
        ]
      },
      "put": {
        "description": "This updates the AreaHistory entity",
        "operationId": "UpdateAreaHistory",
        "parameters": [
          {
            "description": "Id of the AreaHistory to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaHistory id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaHistoryEntity"
              }
            }
          },
          "description": "AreaHistory that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaHistoryEntity"
                }
              }
            },
            "description": "Update Area History Entity details",
            "x-ms-summary": "Update AreaHistory details"
          },
          "404": {
            "description": "AreaHistory not found",
            "x-ms-summary": "AreaHistory not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "AreaHistory"
        ]
      }
    },
    "/areaordevices": {
      "get": {
        "description": "This returns the paginated results for Area Or Device Entity based on the OData Query Parameters.",
        "operationId": "QueryAreaOrDevice",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaOrDeviceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Or Device Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Area Or Device Entity",
        "tags": [
          "AreaOrDevice"
        ]
      },
      "post": {
        "description": "This creates a new AreaOrDevice",
        "operationId": "CreateAreaOrDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaOrDeviceEntity"
              }
            }
          },
          "description": "Creates a new AreaOrDevice",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaOrDeviceEntity"
                }
              }
            },
            "description": "New AreaOrDevice details added",
            "x-ms-summary": "New AreaOrDevice details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "AreaOrDevice not found",
            "x-ms-summary": "AreaOrDevice not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new AreaOrDevice",
        "tags": [
          "AreaOrDevice"
        ]
      }
    },
    "/areaordevices/search/{languageCode}": {
      "get": {
        "description": "This searches the Area Or Device Entity",
        "operationId": "SearchAreaOrDevice",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaOrDeviceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Or Device Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Area Or Device Entity",
        "tags": [
          "AreaOrDevice"
        ]
      }
    },
    "/areaordevices/{id}": {
      "delete": {
        "description": "This deletes a(n) AreaOrDevice by it's GUID.",
        "operationId": "DeleteAreaOrDevice",
        "parameters": [
          {
            "description": "AreaOrDevice id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaOrDevice id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "AreaOrDevice Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "AreaOrDevice"
        ]
      },
      "get": {
        "description": "Finds the Area Or Device Entity by it's GUID",
        "operationId": "FindAreaOrDeviceById",
        "parameters": [
          {
            "description": "Id of the Area Or Device Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area Or Device Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaOrDeviceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Area Or Device Entity by id",
        "tags": [
          "AreaOrDevice"
        ]
      },
      "put": {
        "description": "This updates the AreaOrDevice entity",
        "operationId": "UpdateAreaOrDevice",
        "parameters": [
          {
            "description": "Id of the AreaOrDevice to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "AreaOrDevice id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaOrDeviceEntity"
              }
            }
          },
          "description": "AreaOrDevice that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaOrDeviceEntity"
                }
              }
            },
            "description": "Update Area Or Device Entity details",
            "x-ms-summary": "Update AreaOrDevice details"
          },
          "404": {
            "description": "AreaOrDevice not found",
            "x-ms-summary": "AreaOrDevice not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "AreaOrDevice"
        ]
      }
    },
    "/areas": {
      "get": {
        "description": "This returns the paginated results for Area Entity based on the OData Query Parameters.",
        "operationId": "QueryArea",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Area Entity",
        "tags": [
          "Area"
        ]
      },
      "post": {
        "description": "This creates a new Area",
        "operationId": "CreateArea",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaEntity"
              }
            }
          },
          "description": "Creates a new Area",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaEntity"
                }
              }
            },
            "description": "New Area details added",
            "x-ms-summary": "New Area details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Area not found",
            "x-ms-summary": "Area not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Area",
        "tags": [
          "Area"
        ]
      }
    },
    "/areas/search/{languageCode}": {
      "get": {
        "description": "This searches the Area Entity",
        "operationId": "SearchArea",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Area Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Area Entity",
        "tags": [
          "Area"
        ]
      }
    },
    "/areas/{id}": {
      "delete": {
        "description": "This deletes a(n) Area by it's GUID.",
        "operationId": "DeleteArea",
        "parameters": [
          {
            "description": "Area id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Area Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Area"
        ]
      },
      "get": {
        "description": "Finds the Area Entity by it's GUID",
        "operationId": "FindAreaById",
        "parameters": [
          {
            "description": "Id of the Area Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Area Entity by id",
        "tags": [
          "Area"
        ]
      },
      "put": {
        "description": "This updates the Area entity",
        "operationId": "UpdateArea",
        "parameters": [
          {
            "description": "Id of the Area to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AreaEntity"
              }
            }
          },
          "description": "Area that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AreaEntity"
                }
              }
            },
            "description": "Update Area Entity details",
            "x-ms-summary": "Update Area details"
          },
          "404": {
            "description": "Area not found",
            "x-ms-summary": "Area not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Area"
        ]
      }
    },
    "/areas/{id}/children": {
      "get": {
        "description": "Finds Children Areas for an Area using the Area Id",
        "operationId": "FindChildrenAreasByAreaId",
        "parameters": [
          {
            "description": "ID of the Area",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Area ID"
          },
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Area Children details",
            "x-ms-summary": "Area Children details"
          },
          "404": {
            "description": "Area not found",
            "x-ms-summary": "Area not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Finds Children Areas for an Area using the Area Id",
        "tags": [
          "Area"
        ]
      }
    },
    "/assumptions": {
      "get": {
        "description": "This returns the paginated results for Assumption Entity based on the OData Query Parameters.",
        "operationId": "QueryAssumption",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssumptionEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Assumption Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Assumption Entity",
        "tags": [
          "Assumption"
        ]
      },
      "post": {
        "description": "This creates a new Assumption",
        "operationId": "CreateAssumption",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssumptionEntity"
              }
            }
          },
          "description": "Creates a new Assumption",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssumptionEntity"
                }
              }
            },
            "description": "New Assumption details added",
            "x-ms-summary": "New Assumption details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Assumption not found",
            "x-ms-summary": "Assumption not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Assumption",
        "tags": [
          "Assumption"
        ]
      }
    },
    "/assumptions/search/{languageCode}": {
      "get": {
        "description": "This searches the Assumption Entity",
        "operationId": "SearchAssumption",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AssumptionEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Assumption Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Assumption Entity",
        "tags": [
          "Assumption"
        ]
      }
    },
    "/assumptions/{id}": {
      "delete": {
        "description": "This deletes a(n) Assumption by it's GUID.",
        "operationId": "DeleteAssumption",
        "parameters": [
          {
            "description": "Assumption id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Assumption id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Assumption Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Assumption"
        ]
      },
      "get": {
        "description": "Finds the Assumption Entity by it's GUID",
        "operationId": "FindAssumptionById",
        "parameters": [
          {
            "description": "Id of the Assumption Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Assumption Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssumptionEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Assumption Entity by id",
        "tags": [
          "Assumption"
        ]
      },
      "put": {
        "description": "This updates the Assumption entity",
        "operationId": "UpdateAssumption",
        "parameters": [
          {
            "description": "Id of the Assumption to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Assumption id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AssumptionEntity"
              }
            }
          },
          "description": "Assumption that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AssumptionEntity"
                }
              }
            },
            "description": "Update Assumption Entity details",
            "x-ms-summary": "Update Assumption details"
          },
          "404": {
            "description": "Assumption not found",
            "x-ms-summary": "Assumption not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Assumption"
        ]
      }
    },
    "/audits": {
      "get": {
        "description": "This returns the paginated results for Audit Entity based on the OData Query Parameters.",
        "operationId": "QueryAudit",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Audit Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Audit Entity",
        "tags": [
          "Audit"
        ]
      },
      "post": {
        "description": "This creates a new Audit",
        "operationId": "CreateAudit",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditEntity"
              }
            }
          },
          "description": "Creates a new Audit",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntity"
                }
              }
            },
            "description": "New Audit details added",
            "x-ms-summary": "New Audit details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Audit not found",
            "x-ms-summary": "Audit not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Audit",
        "tags": [
          "Audit"
        ]
      }
    },
    "/audits/search/{languageCode}": {
      "get": {
        "description": "This searches the Audit Entity",
        "operationId": "SearchAudit",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AuditEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Audit Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Audit Entity",
        "tags": [
          "Audit"
        ]
      }
    },
    "/audits/{id}": {
      "delete": {
        "description": "This deletes a(n) Audit by it's GUID.",
        "operationId": "DeleteAudit",
        "parameters": [
          {
            "description": "Audit id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Audit id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Audit Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Audit"
        ]
      },
      "get": {
        "description": "Finds the Audit Entity by it's GUID",
        "operationId": "FindAuditById",
        "parameters": [
          {
            "description": "Id of the Audit Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Audit Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Audit Entity by id",
        "tags": [
          "Audit"
        ]
      },
      "put": {
        "description": "This updates the Audit entity",
        "operationId": "UpdateAudit",
        "parameters": [
          {
            "description": "Id of the Audit to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Audit id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditEntity"
              }
            }
          },
          "description": "Audit that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuditEntity"
                }
              }
            },
            "description": "Update Audit Entity details",
            "x-ms-summary": "Update Audit details"
          },
          "404": {
            "description": "Audit not found",
            "x-ms-summary": "Audit not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Audit"
        ]
      }
    },
    "/blobresources": {
      "get": {
        "description": "This returns the paginated results for Blob Resource Entity based on the OData Query Parameters.",
        "operationId": "QueryBlobResource",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BlobResourceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Blob Resource Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Blob Resource Entity",
        "tags": [
          "BlobResource"
        ]
      },
      "post": {
        "description": "This creates a new BlobResource",
        "operationId": "CreateBlobResource",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlobResourceEntity"
              }
            }
          },
          "description": "Creates a new BlobResource",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResourceEntity"
                }
              }
            },
            "description": "New BlobResource details added",
            "x-ms-summary": "New BlobResource details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "BlobResource not found",
            "x-ms-summary": "BlobResource not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new BlobResource",
        "tags": [
          "BlobResource"
        ]
      }
    },
    "/blobresources/search/{languageCode}": {
      "get": {
        "description": "This searches the Blob Resource Entity",
        "operationId": "SearchBlobResource",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/BlobResourceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Blob Resource Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Blob Resource Entity",
        "tags": [
          "BlobResource"
        ]
      }
    },
    "/blobresources/{id}": {
      "delete": {
        "description": "This deletes a(n) BlobResource by it's GUID.",
        "operationId": "DeleteBlobResource",
        "parameters": [
          {
            "description": "BlobResource id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "BlobResource id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "BlobResource Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "BlobResource"
        ]
      },
      "get": {
        "description": "Finds the Blob Resource Entity by it's GUID",
        "operationId": "FindBlobResourceById",
        "parameters": [
          {
            "description": "Id of the Blob Resource Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Blob Resource Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResourceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Blob Resource Entity by id",
        "tags": [
          "BlobResource"
        ]
      },
      "put": {
        "description": "This updates the BlobResource entity",
        "operationId": "UpdateBlobResource",
        "parameters": [
          {
            "description": "Id of the BlobResource to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "BlobResource id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlobResourceEntity"
              }
            }
          },
          "description": "BlobResource that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResourceEntity"
                }
              }
            },
            "description": "Update Blob Resource Entity details",
            "x-ms-summary": "Update BlobResource details"
          },
          "404": {
            "description": "BlobResource not found",
            "x-ms-summary": "BlobResource not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "BlobResource"
        ]
      }
    },
    "/blobs/upload/{id}": {
      "post": {
        "description": "Uploads the actual Blob data of the BlobResourceEntity. Ensure a $BlobResourceEntity already exists.",
        "operationId": "UploadBlob",
        "parameters": [
          {
            "description": "Id for the blob to be downloaded",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Blob id"
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "description": "Uploads a single file as whatever content type, will default to `application/octet-stream`. Add the `filename` header to overwrite the file name.",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResourceEntity"
                }
              }
            },
            "description": "The returned BlobResourceEntity.",
            "x-ms-summary": "The returned BlobResourceEntity."
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Uploads the actual Blob data",
        "tags": [
          "Blob"
        ]
      }
    },
    "/blobs/{id}": {
      "get": {
        "description": "Downloads the blob",
        "operationId": "DownloadBlobById",
        "parameters": [
          {
            "description": "Id for the blob to be downloaded",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Blob id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Download blob by ID",
        "tags": [
          "Blob"
        ]
      }
    },
    "/blobs/{id}/{versionTag}": {
      "get": {
        "description": "Downloads the blob",
        "operationId": "DownloadBlobByIdAndTag",
        "parameters": [
          {
            "description": "Id for the blob to be downloaded",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Blob id"
          },
          {
            "description": "Entity Tag for the Blob",
            "in": "path",
            "name": "versionTag",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "Blob EntityTag"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Download blob by ID and Entity Tag",
        "tags": [
          "Blob"
        ]
      }
    },
    "/causes": {
      "get": {
        "description": "This returns the paginated results for Cause Entity based on the OData Query Parameters.",
        "operationId": "QueryCause",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CauseEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Cause Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Cause Entity",
        "tags": [
          "Cause"
        ]
      },
      "post": {
        "description": "This creates a new Cause",
        "operationId": "CreateCause",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CauseEntity"
              }
            }
          },
          "description": "Creates a new Cause",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CauseEntity"
                }
              }
            },
            "description": "New Cause details added",
            "x-ms-summary": "New Cause details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Cause not found",
            "x-ms-summary": "Cause not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Cause",
        "tags": [
          "Cause"
        ]
      }
    },
    "/causes/search/{languageCode}": {
      "get": {
        "description": "This searches the Cause Entity",
        "operationId": "SearchCause",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CauseEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Cause Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Cause Entity",
        "tags": [
          "Cause"
        ]
      }
    },
    "/causes/{id}": {
      "delete": {
        "description": "This deletes a(n) Cause by it's GUID.",
        "operationId": "DeleteCause",
        "parameters": [
          {
            "description": "Cause id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Cause id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Cause Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Cause"
        ]
      },
      "get": {
        "description": "Finds the Cause Entity by it's GUID",
        "operationId": "FindCauseById",
        "parameters": [
          {
            "description": "Id of the Cause Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Cause Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CauseEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Cause Entity by id",
        "tags": [
          "Cause"
        ]
      },
      "put": {
        "description": "This updates the Cause entity",
        "operationId": "UpdateCause",
        "parameters": [
          {
            "description": "Id of the Cause to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Cause id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CauseEntity"
              }
            }
          },
          "description": "Cause that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CauseEntity"
                }
              }
            },
            "description": "Update Cause Entity details",
            "x-ms-summary": "Update Cause details"
          },
          "404": {
            "description": "Cause not found",
            "x-ms-summary": "Cause not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Cause"
        ]
      }
    },
    "/citations": {
      "get": {
        "description": "This returns the paginated results for Citation Entity based on the OData Query Parameters.",
        "operationId": "QueryCitation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CitationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Citation Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Citation Entity",
        "tags": [
          "Citation"
        ]
      },
      "post": {
        "description": "This creates a new Citation",
        "operationId": "CreateCitation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CitationEntity"
              }
            }
          },
          "description": "Creates a new Citation",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CitationEntity"
                }
              }
            },
            "description": "New Citation details added",
            "x-ms-summary": "New Citation details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Citation not found",
            "x-ms-summary": "Citation not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Citation",
        "tags": [
          "Citation"
        ]
      }
    },
    "/citations/search/{languageCode}": {
      "get": {
        "description": "This searches the Citation Entity",
        "operationId": "SearchCitation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CitationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Citation Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Citation Entity",
        "tags": [
          "Citation"
        ]
      }
    },
    "/citations/{id}": {
      "delete": {
        "description": "This deletes a(n) Citation by it's GUID.",
        "operationId": "DeleteCitation",
        "parameters": [
          {
            "description": "Citation id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Citation id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Citation Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Citation"
        ]
      },
      "get": {
        "description": "Finds the Citation Entity by it's GUID",
        "operationId": "FindCitationById",
        "parameters": [
          {
            "description": "Id of the Citation Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Citation Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CitationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Citation Entity by id",
        "tags": [
          "Citation"
        ]
      },
      "put": {
        "description": "This updates the Citation entity",
        "operationId": "UpdateCitation",
        "parameters": [
          {
            "description": "Id of the Citation to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Citation id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CitationEntity"
              }
            }
          },
          "description": "Citation that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CitationEntity"
                }
              }
            },
            "description": "Update Citation Entity details",
            "x-ms-summary": "Update Citation details"
          },
          "404": {
            "description": "Citation not found",
            "x-ms-summary": "Citation not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Citation"
        ]
      }
    },
    "/collections/bypass/{id}": {
      "get": {
        "description": "Bypass Event",
        "operationId": "ByPass",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Bypass Event",
        "tags": [
          "Bypass Event"
        ]
      }
    },
    "/collections/decommission/{id}": {
      "get": {
        "description": "Decommission Event",
        "operationId": "DecommissionEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Decommission Event",
        "tags": [
          "Decommission Event"
        ]
      }
    },
    "/collections/event/{id}": {
      "get": {
        "description": "Collection Event",
        "operationId": "CollectionEvent",
        "parameters": [
          {
            "description": "Event Metadata Entity Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Event Metadata Entity Id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Collection Event",
        "tags": [
          "Collection Event"
        ]
      }
    },
    "/collections/failure/{id}/{repair}/{replace}": {
      "get": {
        "description": "Failure Event",
        "operationId": "FailureEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          },
          {
            "description": "Boolean Indicates if a Repair is Required",
            "in": "path",
            "name": "repair",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "x-ms-summary": "Boolean Indicates if a Repair is Required"
          },
          {
            "description": "Boolean Indicates if a Replace is Required",
            "in": "path",
            "name": "replace",
            "required": true,
            "schema": {
              "type": "boolean"
            },
            "x-ms-summary": "Boolean Indicates if a Replace is Required"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Failure Event",
        "tags": [
          "Failure Event"
        ]
      }
    },
    "/collections/hazard/{id}": {
      "get": {
        "description": "Hazard Event",
        "operationId": "Hazard",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Hazard Event",
        "tags": [
          "Hazard Event"
        ]
      }
    },
    "/collections/install/{id}": {
      "get": {
        "description": "Install Event",
        "operationId": "InstallEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Install Event",
        "tags": [
          "Install"
        ]
      }
    },
    "/collections/move/{id}": {
      "get": {
        "description": "Move Event",
        "operationId": "MoveEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Move Event",
        "tags": [
          "Move Event"
        ]
      }
    },
    "/collections/procedure/{id}": {
      "get": {
        "description": "Processes Procedure Events",
        "operationId": "ProcedureEvent",
        "parameters": [
          {
            "description": "Event Metadata Entity Id that is considered a Procedure Event.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "EventMetadataEntityId"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Returns the async HTTP 202 pattern. Use the URIs in this response to check the status.",
            "x-ms-summary": "Returns the async HTTP 202 pattern."
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Procedure Event",
        "tags": [
          "Collection"
        ]
      }
    },
    "/collections/repair/{id}": {
      "get": {
        "description": "Repair Entity Event",
        "operationId": "RepairEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Repair Entity Event",
        "tags": [
          "Repair"
        ]
      }
    },
    "/collections/replace/{id}": {
      "get": {
        "description": "Replace Event",
        "operationId": "ReplaceEvent",
        "parameters": [
          {
            "description": "Meta Data ID",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Meta data ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Replace Event",
        "tags": [
          "Replace Event"
        ]
      }
    },
    "/consequences": {
      "get": {
        "description": "This returns the paginated results for Consequence Entity based on the OData Query Parameters.",
        "operationId": "QueryConsequence",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsequenceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Consequence Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Consequence Entity",
        "tags": [
          "Consequence"
        ]
      },
      "post": {
        "description": "This creates a new Consequence",
        "operationId": "CreateConsequence",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsequenceEntity"
              }
            }
          },
          "description": "Creates a new Consequence",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsequenceEntity"
                }
              }
            },
            "description": "New Consequence details added",
            "x-ms-summary": "New Consequence details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Consequence not found",
            "x-ms-summary": "Consequence not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Consequence",
        "tags": [
          "Consequence"
        ]
      }
    },
    "/consequences/search/{languageCode}": {
      "get": {
        "description": "This searches the Consequence Entity",
        "operationId": "SearchConsequence",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ConsequenceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Consequence Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Consequence Entity",
        "tags": [
          "Consequence"
        ]
      }
    },
    "/consequences/{id}": {
      "delete": {
        "description": "This deletes a(n) Consequence by it's GUID.",
        "operationId": "DeleteConsequence",
        "parameters": [
          {
            "description": "Consequence id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Consequence id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Consequence Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Consequence"
        ]
      },
      "get": {
        "description": "Finds the Consequence Entity by it's GUID",
        "operationId": "FindConsequenceById",
        "parameters": [
          {
            "description": "Id of the Consequence Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Consequence Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsequenceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Consequence Entity by id",
        "tags": [
          "Consequence"
        ]
      },
      "put": {
        "description": "This updates the Consequence entity",
        "operationId": "UpdateConsequence",
        "parameters": [
          {
            "description": "Id of the Consequence to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Consequence id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsequenceEntity"
              }
            }
          },
          "description": "Consequence that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConsequenceEntity"
                }
              }
            },
            "description": "Update Consequence Entity details",
            "x-ms-summary": "Update Consequence details"
          },
          "404": {
            "description": "Consequence not found",
            "x-ms-summary": "Consequence not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Consequence"
        ]
      }
    },
    "/currencies": {
      "get": {
        "description": "This returns the paginated results for Currency Entity based on the OData Query Parameters.",
        "operationId": "QueryCurrency",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CurrencyEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Currency Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Currency Entity",
        "tags": [
          "Currency"
        ]
      },
      "post": {
        "description": "This creates a new Currency",
        "operationId": "CreateCurrency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyEntity"
              }
            }
          },
          "description": "Creates a new Currency",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            },
            "description": "New Currency details added",
            "x-ms-summary": "New Currency details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Currency not found",
            "x-ms-summary": "Currency not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Currency",
        "tags": [
          "Currency"
        ]
      }
    },
    "/currencies/search/{languageCode}": {
      "get": {
        "description": "This searches the Currency Entity",
        "operationId": "SearchCurrency",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/CurrencyEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Currency Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Currency Entity",
        "tags": [
          "Currency"
        ]
      }
    },
    "/currencies/{id}": {
      "delete": {
        "description": "This deletes a(n) Currency by it's GUID.",
        "operationId": "DeleteCurrency",
        "parameters": [
          {
            "description": "Currency id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Currency id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Currency Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Currency"
        ]
      },
      "get": {
        "description": "Finds the Currency Entity by it's GUID",
        "operationId": "FindCurrencyById",
        "parameters": [
          {
            "description": "Id of the Currency Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Currency Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Currency Entity by id",
        "tags": [
          "Currency"
        ]
      },
      "put": {
        "description": "This updates the Currency entity",
        "operationId": "UpdateCurrency",
        "parameters": [
          {
            "description": "Id of the Currency to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Currency id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyEntity"
              }
            }
          },
          "description": "Currency that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrencyEntity"
                }
              }
            },
            "description": "Update Currency Entity details",
            "x-ms-summary": "Update Currency details"
          },
          "404": {
            "description": "Currency not found",
            "x-ms-summary": "Currency not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Currency"
        ]
      }
    },
    "/dashboard/export/{id}": {
      "get": {
        "description": "Export Dashboard",
        "operationId": "ExportDashboard",
        "parameters": [
          {
            "description": "Id of the Device Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Export Dashboard",
        "tags": [
          "Export Dashboard"
        ]
      }
    },
    "/datacollectionconfigurations": {
      "get": {
        "description": "This returns the paginated results for Data Collection Configuration Entity based on the OData Query Parameters.",
        "operationId": "QueryDataCollectionConfiguration",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Data Collection Configuration Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Data Collection Configuration Entity",
        "tags": [
          "DataCollectionConfiguration"
        ]
      },
      "post": {
        "description": "This creates a new DataCollectionConfiguration",
        "operationId": "CreateDataCollectionConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
              }
            }
          },
          "description": "Creates a new DataCollectionConfiguration",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
                }
              }
            },
            "description": "New DataCollectionConfiguration details added",
            "x-ms-summary": "New DataCollectionConfiguration details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "DataCollectionConfiguration not found",
            "x-ms-summary": "DataCollectionConfiguration not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new DataCollectionConfiguration",
        "tags": [
          "DataCollectionConfiguration"
        ]
      }
    },
    "/datacollectionconfigurations/search/{languageCode}": {
      "get": {
        "description": "This searches the Data Collection Configuration Entity",
        "operationId": "SearchDataCollectionConfiguration",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Data Collection Configuration Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Data Collection Configuration Entity",
        "tags": [
          "DataCollectionConfiguration"
        ]
      }
    },
    "/datacollectionconfigurations/{id}": {
      "delete": {
        "description": "This deletes a(n) DataCollectionConfiguration by it's GUID.",
        "operationId": "DeleteDataCollectionConfiguration",
        "parameters": [
          {
            "description": "DataCollectionConfiguration id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DataCollectionConfiguration id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "DataCollectionConfiguration Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "DataCollectionConfiguration"
        ]
      },
      "get": {
        "description": "Finds the Data Collection Configuration Entity by it's GUID",
        "operationId": "FindDataCollectionConfigurationById",
        "parameters": [
          {
            "description": "Id of the Data Collection Configuration Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Data Collection Configuration Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Data Collection Configuration Entity by id",
        "tags": [
          "DataCollectionConfiguration"
        ]
      },
      "put": {
        "description": "This updates the DataCollectionConfiguration entity",
        "operationId": "UpdateDataCollectionConfiguration",
        "parameters": [
          {
            "description": "Id of the DataCollectionConfiguration to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DataCollectionConfiguration id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
              }
            }
          },
          "description": "DataCollectionConfiguration that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DataCollectionConfigurationEntity"
                }
              }
            },
            "description": "Update Data Collection Configuration Entity details",
            "x-ms-summary": "Update DataCollectionConfiguration details"
          },
          "404": {
            "description": "DataCollectionConfiguration not found",
            "x-ms-summary": "DataCollectionConfiguration not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "DataCollectionConfiguration"
        ]
      }
    },
    "/demandlineitemnodes": {
      "get": {
        "description": "This returns the paginated results for Demand Line Item Node Entity based on the OData Query Parameters.",
        "operationId": "QueryDemandLineItemNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DemandLineItemNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Demand Line Item Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Demand Line Item Node Entity",
        "tags": [
          "DemandLineItemNode"
        ]
      },
      "post": {
        "description": "This creates a new DemandLineItemNode",
        "operationId": "CreateDemandLineItemNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemandLineItemNodeEntity"
              }
            }
          },
          "description": "Creates a new DemandLineItemNode",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandLineItemNodeEntity"
                }
              }
            },
            "description": "New DemandLineItemNode details added",
            "x-ms-summary": "New DemandLineItemNode details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "DemandLineItemNode not found",
            "x-ms-summary": "DemandLineItemNode not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new DemandLineItemNode",
        "tags": [
          "DemandLineItemNode"
        ]
      }
    },
    "/demandlineitemnodes/search/{languageCode}": {
      "get": {
        "description": "This searches the Demand Line Item Node Entity",
        "operationId": "SearchDemandLineItemNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DemandLineItemNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Demand Line Item Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Demand Line Item Node Entity",
        "tags": [
          "DemandLineItemNode"
        ]
      }
    },
    "/demandlineitemnodes/{id}": {
      "delete": {
        "description": "This deletes a(n) DemandLineItemNode by it's GUID.",
        "operationId": "DeleteDemandLineItemNode",
        "parameters": [
          {
            "description": "DemandLineItemNode id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DemandLineItemNode id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "DemandLineItemNode Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "DemandLineItemNode"
        ]
      },
      "get": {
        "description": "Finds the Demand Line Item Node Entity by it's GUID",
        "operationId": "FindDemandLineItemNodeById",
        "parameters": [
          {
            "description": "Id of the Demand Line Item Node Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Demand Line Item Node Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandLineItemNodeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Demand Line Item Node Entity by id",
        "tags": [
          "DemandLineItemNode"
        ]
      },
      "put": {
        "description": "This updates the DemandLineItemNode entity",
        "operationId": "UpdateDemandLineItemNode",
        "parameters": [
          {
            "description": "Id of the DemandLineItemNode to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DemandLineItemNode id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemandLineItemNodeEntity"
              }
            }
          },
          "description": "DemandLineItemNode that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandLineItemNodeEntity"
                }
              }
            },
            "description": "Update Demand Line Item Node Entity details",
            "x-ms-summary": "Update DemandLineItemNode details"
          },
          "404": {
            "description": "DemandLineItemNode not found",
            "x-ms-summary": "DemandLineItemNode not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "DemandLineItemNode"
        ]
      }
    },
    "/demands": {
      "get": {
        "description": "This returns the paginated results for Demand Entity based on the OData Query Parameters.",
        "operationId": "QueryDemand",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DemandEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Demand Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Demand Entity",
        "tags": [
          "Demand"
        ]
      },
      "post": {
        "description": "This creates a new Demand",
        "operationId": "CreateDemand",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemandEntity"
              }
            }
          },
          "description": "Creates a new Demand",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandEntity"
                }
              }
            },
            "description": "New Demand details added",
            "x-ms-summary": "New Demand details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Demand not found",
            "x-ms-summary": "Demand not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Demand",
        "tags": [
          "Demand"
        ]
      }
    },
    "/demands/search/{languageCode}": {
      "get": {
        "description": "This searches the Demand Entity",
        "operationId": "SearchDemand",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DemandEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Demand Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Demand Entity",
        "tags": [
          "Demand"
        ]
      }
    },
    "/demands/{id}": {
      "delete": {
        "description": "This deletes a(n) Demand by it's GUID.",
        "operationId": "DeleteDemand",
        "parameters": [
          {
            "description": "Demand id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Demand id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Demand Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Demand"
        ]
      },
      "get": {
        "description": "Finds the Demand Entity by it's GUID",
        "operationId": "FindDemandById",
        "parameters": [
          {
            "description": "Id of the Demand Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Demand Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Demand Entity by id",
        "tags": [
          "Demand"
        ]
      },
      "put": {
        "description": "This updates the Demand entity",
        "operationId": "UpdateDemand",
        "parameters": [
          {
            "description": "Id of the Demand to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Demand id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DemandEntity"
              }
            }
          },
          "description": "Demand that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DemandEntity"
                }
              }
            },
            "description": "Update Demand Entity details",
            "x-ms-summary": "Update Demand details"
          },
          "404": {
            "description": "Demand not found",
            "x-ms-summary": "Demand not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Demand"
        ]
      }
    },
    "/deviations": {
      "get": {
        "description": "This returns the paginated results for Deviation Entity based on the OData Query Parameters.",
        "operationId": "QueryDeviation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Deviation Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Deviation Entity",
        "tags": [
          "Deviation"
        ]
      },
      "post": {
        "description": "This creates a new Deviation",
        "operationId": "CreateDeviation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviationEntity"
              }
            }
          },
          "description": "Creates a new Deviation",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviationEntity"
                }
              }
            },
            "description": "New Deviation details added",
            "x-ms-summary": "New Deviation details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Deviation not found",
            "x-ms-summary": "Deviation not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Deviation",
        "tags": [
          "Deviation"
        ]
      }
    },
    "/deviations/search/{languageCode}": {
      "get": {
        "description": "This searches the Deviation Entity",
        "operationId": "SearchDeviation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Deviation Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Deviation Entity",
        "tags": [
          "Deviation"
        ]
      }
    },
    "/deviations/{id}": {
      "delete": {
        "description": "This deletes a(n) Deviation by it's GUID.",
        "operationId": "DeleteDeviation",
        "parameters": [
          {
            "description": "Deviation id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Deviation id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Deviation Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Deviation"
        ]
      },
      "get": {
        "description": "Finds the Deviation Entity by it's GUID",
        "operationId": "FindDeviationById",
        "parameters": [
          {
            "description": "Id of the Deviation Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Deviation Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Deviation Entity by id",
        "tags": [
          "Deviation"
        ]
      },
      "put": {
        "description": "This updates the Deviation entity",
        "operationId": "UpdateDeviation",
        "parameters": [
          {
            "description": "Id of the Deviation to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Deviation id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviationEntity"
              }
            }
          },
          "description": "Deviation that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviationEntity"
                }
              }
            },
            "description": "Update Deviation Entity details",
            "x-ms-summary": "Update Deviation details"
          },
          "404": {
            "description": "Deviation not found",
            "x-ms-summary": "Deviation not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Deviation"
        ]
      }
    },
    "/devicehistories": {
      "get": {
        "description": "This returns the paginated results for Device History Entity based on the OData Query Parameters.",
        "operationId": "QueryDeviceHistory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceHistoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device History Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Device History Entity",
        "tags": [
          "DeviceHistory"
        ]
      },
      "post": {
        "description": "This creates a new DeviceHistory",
        "operationId": "CreateDeviceHistory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceHistoryEntity"
              }
            }
          },
          "description": "Creates a new DeviceHistory",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceHistoryEntity"
                }
              }
            },
            "description": "New DeviceHistory details added",
            "x-ms-summary": "New DeviceHistory details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "DeviceHistory not found",
            "x-ms-summary": "DeviceHistory not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new DeviceHistory",
        "tags": [
          "DeviceHistory"
        ]
      }
    },
    "/devicehistories/search/{languageCode}": {
      "get": {
        "description": "This searches the Device History Entity",
        "operationId": "SearchDeviceHistory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceHistoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device History Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Device History Entity",
        "tags": [
          "DeviceHistory"
        ]
      }
    },
    "/devicehistories/{id}": {
      "delete": {
        "description": "This deletes a(n) DeviceHistory by it's GUID.",
        "operationId": "DeleteDeviceHistory",
        "parameters": [
          {
            "description": "DeviceHistory id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceHistory id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "DeviceHistory Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "DeviceHistory"
        ]
      },
      "get": {
        "description": "Finds the Device History Entity by it's GUID",
        "operationId": "FindDeviceHistoryById",
        "parameters": [
          {
            "description": "Id of the Device History Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device History Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceHistoryEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Device History Entity by id",
        "tags": [
          "DeviceHistory"
        ]
      },
      "put": {
        "description": "This updates the DeviceHistory entity",
        "operationId": "UpdateDeviceHistory",
        "parameters": [
          {
            "description": "Id of the DeviceHistory to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceHistory id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceHistoryEntity"
              }
            }
          },
          "description": "DeviceHistory that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceHistoryEntity"
                }
              }
            },
            "description": "Update Device History Entity details",
            "x-ms-summary": "Update DeviceHistory details"
          },
          "404": {
            "description": "DeviceHistory not found",
            "x-ms-summary": "DeviceHistory not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "DeviceHistory"
        ]
      }
    },
    "/devicemodels": {
      "get": {
        "description": "This queries the Device Model Entity",
        "operationId": "QueryDeviceModel",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModelEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Odata query",
        "tags": [
          "DeviceModel"
        ]
      },
      "post": {
        "description": "This creates a new DeviceModel",
        "operationId": "CreateDeviceModelEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceModelEntity"
              }
            }
          },
          "description": "Creates a new DeviceModel",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModelEntity"
                }
              }
            },
            "description": "New DeviceModel details added",
            "x-ms-summary": "New DeviceModel details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "DeviceModel not found",
            "x-ms-summary": "DeviceModel not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new DeviceModel",
        "tags": [
          "DeviceModel"
        ]
      }
    },
    "/devicemodels/{id}": {
      "delete": {
        "description": "This deletes a(n) DeviceModel by it's GUID.",
        "operationId": "DeleteDeviceModelEntity",
        "parameters": [
          {
            "description": "DeviceModel id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceModel id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "DeviceModel Deleted successfully"
          },
          "400": {
            "description": "Invalid State",
            "x-ms-summary": "Invalid State"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "DeviceModel"
        ]
      },
      "get": {
        "description": "Finds the Device Model Entity by it's GUID",
        "operationId": "FindDeviceModelById",
        "parameters": [
          {
            "description": "Id of the Device Model Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device Model Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModelEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "400": {
            "description": "Invalid State",
            "x-ms-summary": "Invalid State"
          },
          "404": {
            "description": "DeviceModel not found",
            "x-ms-summary": "DeviceModel not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Device Model Entity by id",
        "tags": [
          "DeviceModel"
        ]
      },
      "put": {
        "description": "This updates the DeviceModel entity",
        "operationId": "UpdateDeviceModelEntity",
        "parameters": [
          {
            "description": "Id of the DeviceModel to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceModel id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceModelEntity"
              }
            }
          },
          "description": "DeviceModel that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceModelEntity"
                }
              }
            },
            "description": "Update DeviceModel details",
            "x-ms-summary": "Update DeviceModel details"
          },
          "400": {
            "description": "Invalid State",
            "x-ms-summary": "Invalid State"
          },
          "404": {
            "description": "DeviceModel not found",
            "x-ms-summary": "DeviceModel not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "DeviceModel"
        ]
      }
    },
    "/devicemodels/{id}/failureclassifications": {
      "get": {
        "description": "Find Failure Classifications By Device Model Id",
        "operationId": "FindFailureClassificationsByDeviceModelId",
        "parameters": [
          {
            "description": "Id of the Device Model Entity",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device Model Entity Iid"
          },
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureClassificationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Failure Classifications details",
            "x-ms-summary": "Failure Classifications details"
          },
          "404": {
            "description": "Failure Classifications not found",
            "x-ms-summary": "Failure Classifications not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Failure Classifications By Device Model Id",
        "tags": [
          "DeviceModel"
        ]
      }
    },
    "/devices": {
      "get": {
        "description": "This returns the paginated results for Device Entity based on the OData Query Parameters.",
        "operationId": "QueryDevice",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Device Entity",
        "tags": [
          "Device"
        ]
      },
      "post": {
        "description": "This creates a new Device",
        "operationId": "CreateDevice",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceEntity"
              }
            }
          },
          "description": "Creates a new Device",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceEntity"
                }
              }
            },
            "description": "New Device details added",
            "x-ms-summary": "New Device details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Device not found",
            "x-ms-summary": "Device not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Device",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/search/{languageCode}": {
      "get": {
        "description": "This searches the Device Entity",
        "operationId": "SearchDevice",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Device Entity",
        "tags": [
          "Device"
        ]
      }
    },
    "/devices/{id}": {
      "delete": {
        "description": "This deletes a(n) Device by it's GUID.",
        "operationId": "DeleteDevice",
        "parameters": [
          {
            "description": "Device id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Device Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Device"
        ]
      },
      "get": {
        "description": "Finds the Device Entity by it's GUID",
        "operationId": "FindDeviceById",
        "parameters": [
          {
            "description": "Id of the Device Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Device Entity by id",
        "tags": [
          "Device"
        ]
      },
      "put": {
        "description": "This updates the Device entity",
        "operationId": "UpdateDevice",
        "parameters": [
          {
            "description": "Id of the Device to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceEntity"
              }
            }
          },
          "description": "Device that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceEntity"
                }
              }
            },
            "description": "Update Device Entity details",
            "x-ms-summary": "Update Device details"
          },
          "404": {
            "description": "Device not found",
            "x-ms-summary": "Device not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Device"
        ]
      }
    },
    "/devicetypes": {
      "get": {
        "description": "This returns the paginated results for Device Type Entity based on the OData Query Parameters.",
        "operationId": "QueryDeviceType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Device Type Entity",
        "tags": [
          "DeviceType"
        ]
      },
      "post": {
        "description": "This creates a new DeviceType",
        "operationId": "CreateDeviceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceTypeEntity"
              }
            }
          },
          "description": "Creates a new DeviceType",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypeEntity"
                }
              }
            },
            "description": "New DeviceType details added",
            "x-ms-summary": "New DeviceType details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "DeviceType not found",
            "x-ms-summary": "DeviceType not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new DeviceType",
        "tags": [
          "DeviceType"
        ]
      }
    },
    "/devicetypes/search/{languageCode}": {
      "get": {
        "description": "This searches the Device Type Entity",
        "operationId": "SearchDeviceType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/DeviceTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Device Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Device Type Entity",
        "tags": [
          "DeviceType"
        ]
      }
    },
    "/devicetypes/{id}": {
      "delete": {
        "description": "This deletes a(n) DeviceType by it's GUID.",
        "operationId": "DeleteDeviceType",
        "parameters": [
          {
            "description": "DeviceType id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceType id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "DeviceType Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "DeviceType"
        ]
      },
      "get": {
        "description": "Finds the Device Type Entity by it's GUID",
        "operationId": "FindDeviceTypeById",
        "parameters": [
          {
            "description": "Id of the Device Type Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Device Type Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Device Type Entity by id",
        "tags": [
          "DeviceType"
        ]
      },
      "put": {
        "description": "This updates the DeviceType entity",
        "operationId": "UpdateDeviceType",
        "parameters": [
          {
            "description": "Id of the DeviceType to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "DeviceType id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceTypeEntity"
              }
            }
          },
          "description": "DeviceType that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceTypeEntity"
                }
              }
            },
            "description": "Update Device Type Entity details",
            "x-ms-summary": "Update DeviceType details"
          },
          "404": {
            "description": "DeviceType not found",
            "x-ms-summary": "DeviceType not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "DeviceType"
        ]
      }
    },
    "/eventmetadatas": {
      "get": {
        "description": "This returns the paginated results for Event Metadata Entity based on the OData Query Parameters.",
        "operationId": "QueryEventMetadata",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventMetadataEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Event Metadata Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Event Metadata Entity",
        "tags": [
          "EventMetadata"
        ]
      },
      "post": {
        "description": "This creates a new EventMetadata",
        "operationId": "CreateEventMetadata",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventMetadataEntity"
              }
            }
          },
          "description": "Creates a new EventMetadata",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventMetadataEntity"
                }
              }
            },
            "description": "New EventMetadata details added",
            "x-ms-summary": "New EventMetadata details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "EventMetadata not found",
            "x-ms-summary": "EventMetadata not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new EventMetadata",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/search/{languageCode}": {
      "get": {
        "description": "This searches the Event Metadata Entity",
        "operationId": "SearchEventMetadata",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventMetadataEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Event Metadata Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Event Metadata Entity",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/{id}": {
      "delete": {
        "description": "This deletes a(n) EventMeta by it's GUID.",
        "operationId": "DeleteEventMetaEntity",
        "parameters": [
          {
            "description": "EventMeta id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "EventMeta id to delete"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventMetadataEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "EventMetadata"
        ]
      },
      "get": {
        "description": "Finds the Event Metadata Entity by it's GUID",
        "operationId": "FindEventMetadataById",
        "parameters": [
          {
            "description": "Id of the Event Metadata Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Event Metadata Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventMetadataEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Event Metadata Entity by id",
        "tags": [
          "EventMetadata"
        ]
      },
      "put": {
        "description": "This updates the EventMetadata entity",
        "operationId": "UpdateEventMetadata",
        "parameters": [
          {
            "description": "Id of the EventMetadata to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "EventMetadata id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventMetadataEntity"
              }
            }
          },
          "description": "EventMetadata that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventMetadataEntity"
                }
              }
            },
            "description": "Update Event Metadata Entity details",
            "x-ms-summary": "Update EventMetadata details"
          },
          "404": {
            "description": "EventMetadata not found",
            "x-ms-summary": "EventMetadata not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/{id}/approval": {
      "put": {
        "description": "This either approves or rejects the event.",
        "operationId": "CollectionEventApproval",
        "parameters": [
          {
            "description": "The Event Id to provide approval for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Id"
          },
          {
            "description": "True for approved",
            "in": "query",
            "name": "approved",
            "schema": {
              "type": "boolean"
            },
            "x-ms-summary": "approved"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "400": {
            "description": "No description"
          },
          "401": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "405": {
            "description": "No description"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Event Approval",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/{id}/approval/request": {
      "get": {
        "description": "This requests a Event to be approved or rejected.",
        "operationId": "CollectionEventApprovalRequest",
        "parameters": [
          {
            "description": "The Event Id to provide approval for.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "400": {
            "description": "No description"
          },
          "401": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "405": {
            "description": "No description"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Event Approval Request",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/{id}/complete/edit": {
      "post": {
        "description": "Update a Completed Event Metadata Entity to allow editing",
        "operationId": "UpdateCompletedEventMetaEntity",
        "parameters": [
          {
            "description": "Id of the Event Metadata Entity to update",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Event Metadata Entity id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Event Metadata Entity that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventMetadataEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update a Completed Event Metadata Entity to allow editing",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/eventmetadatas/{id}/failurelineitems": {
      "get": {
        "description": "Find FailureLine Items By Event Id",
        "operationId": "GetEventMetadataFailureLineItemNode",
        "parameters": [
          {
            "description": "Id of the Event Entity",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Event Entity Id"
          },
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "FailureLine Item details",
            "x-ms-summary": "FailureLine Item details"
          },
          "404": {
            "description": "FailureLine Items not found",
            "x-ms-summary": "FailureLine Items not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find FailureLine Items By Event Id",
        "tags": [
          "EventMetadata"
        ]
      }
    },
    "/failureclassifications": {
      "get": {
        "description": "This returns the paginated results for Failure Classification Entity based on the OData Query Parameters.",
        "operationId": "QueryFailureClassification",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureClassificationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Classification Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Failure Classification Entity",
        "tags": [
          "FailureClassification"
        ]
      },
      "post": {
        "description": "This creates a new FailureClassification",
        "operationId": "CreateFailureClassification",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureClassificationEntity"
              }
            }
          },
          "description": "Creates a new FailureClassification",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureClassificationEntity"
                }
              }
            },
            "description": "New FailureClassification details added",
            "x-ms-summary": "New FailureClassification details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "FailureClassification not found",
            "x-ms-summary": "FailureClassification not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new FailureClassification",
        "tags": [
          "FailureClassification"
        ]
      }
    },
    "/failureclassifications/search/{languageCode}": {
      "get": {
        "description": "This searches the Failure Classification Entity",
        "operationId": "SearchFailureClassification",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureClassificationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Classification Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Failure Classification Entity",
        "tags": [
          "FailureClassification"
        ]
      }
    },
    "/failureclassifications/{id}": {
      "delete": {
        "description": "This deletes a(n) FailureClassification by it's GUID.",
        "operationId": "DeleteFailureClassification",
        "parameters": [
          {
            "description": "FailureClassification id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "FailureClassification id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "FailureClassification Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "FailureClassification"
        ]
      },
      "get": {
        "description": "Finds the Failure Classification Entity by it's GUID",
        "operationId": "FindFailureClassificationById",
        "parameters": [
          {
            "description": "Id of the Failure Classification Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Failure Classification Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureClassificationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Failure Classification Entity by id",
        "tags": [
          "FailureClassification"
        ]
      },
      "put": {
        "description": "This updates the FailureClassification entity",
        "operationId": "UpdateFailureClassification",
        "parameters": [
          {
            "description": "Id of the FailureClassification to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "FailureClassification id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureClassificationEntity"
              }
            }
          },
          "description": "FailureClassification that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureClassificationEntity"
                }
              }
            },
            "description": "Update Failure Classification Entity details",
            "x-ms-summary": "Update FailureClassification details"
          },
          "404": {
            "description": "FailureClassification not found",
            "x-ms-summary": "FailureClassification not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "FailureClassification"
        ]
      }
    },
    "/failurelineitemnodes": {
      "get": {
        "description": "This returns the paginated results for Failure Line Item Node Entity based on the OData Query Parameters.",
        "operationId": "QueryFailureLineItemNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Line Item Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Failure Line Item Node Entity",
        "tags": [
          "FailureLineItemNode"
        ]
      },
      "post": {
        "description": "This creates a new FailureLineItemNode",
        "operationId": "CreateFailureLineItemNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureLineItemNodeEntity"
              }
            }
          },
          "description": "Creates a new FailureLineItemNode",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                }
              }
            },
            "description": "New FailureLineItemNode details added",
            "x-ms-summary": "New FailureLineItemNode details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "FailureLineItemNode not found",
            "x-ms-summary": "FailureLineItemNode not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new FailureLineItemNode",
        "tags": [
          "FailureLineItemNode"
        ]
      }
    },
    "/failurelineitemnodes/search/{languageCode}": {
      "get": {
        "description": "This searches the Failure Line Item Node Entity",
        "operationId": "SearchFailureLineItemNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Line Item Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Failure Line Item Node Entity",
        "tags": [
          "FailureLineItemNode"
        ]
      }
    },
    "/failurelineitemnodes/{id}": {
      "delete": {
        "description": "This deletes a(n) FailureLineItemNode by it's GUID.",
        "operationId": "DeleteFailureLineItemNode",
        "parameters": [
          {
            "description": "FailureLineItemNode id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "FailureLineItemNode id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "FailureLineItemNode Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "FailureLineItemNode"
        ]
      },
      "get": {
        "description": "Finds the Failure Line Item Node Entity by it's GUID",
        "operationId": "FindFailureLineItemNodeById",
        "parameters": [
          {
            "description": "Id of the Failure Line Item Node Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Failure Line Item Node Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Failure Line Item Node Entity by id",
        "tags": [
          "FailureLineItemNode"
        ]
      },
      "put": {
        "description": "This updates the FailureLineItemNode entity",
        "operationId": "UpdateFailureLineItemNode",
        "parameters": [
          {
            "description": "Id of the FailureLineItemNode to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "FailureLineItemNode id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureLineItemNodeEntity"
              }
            }
          },
          "description": "FailureLineItemNode that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureLineItemNodeEntity"
                }
              }
            },
            "description": "Update Failure Line Item Node Entity details",
            "x-ms-summary": "Update FailureLineItemNode details"
          },
          "404": {
            "description": "FailureLineItemNode not found",
            "x-ms-summary": "FailureLineItemNode not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "FailureLineItemNode"
        ]
      }
    },
    "/failures": {
      "get": {
        "description": "This returns the paginated results for Failure Entity based on the OData Query Parameters.",
        "operationId": "QueryFailure",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Failure Entity",
        "tags": [
          "Failure"
        ]
      },
      "post": {
        "description": "This creates a new Failure",
        "operationId": "CreateFailure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureEntity"
              }
            }
          },
          "description": "Creates a new Failure",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureEntity"
                }
              }
            },
            "description": "New Failure details added",
            "x-ms-summary": "New Failure details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Failure not found",
            "x-ms-summary": "Failure not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Failure",
        "tags": [
          "Failure"
        ]
      }
    },
    "/failures/search/{languageCode}": {
      "get": {
        "description": "This searches the Failure Entity",
        "operationId": "SearchFailure",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/FailureEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Failure Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Failure Entity",
        "tags": [
          "Failure"
        ]
      }
    },
    "/failures/{id}": {
      "delete": {
        "description": "This deletes a(n) Failure by it's GUID.",
        "operationId": "DeleteFailure",
        "parameters": [
          {
            "description": "Failure id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Failure id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Failure Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Failure"
        ]
      },
      "get": {
        "description": "Finds the Failure Entity by it's GUID",
        "operationId": "FindFailureById",
        "parameters": [
          {
            "description": "Id of the Failure Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Failure Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Failure Entity by id",
        "tags": [
          "Failure"
        ]
      },
      "put": {
        "description": "This updates the Failure entity",
        "operationId": "UpdateFailure",
        "parameters": [
          {
            "description": "Id of the Failure to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Failure id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FailureEntity"
              }
            }
          },
          "description": "Failure that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FailureEntity"
                }
              }
            },
            "description": "Update Failure Entity details",
            "x-ms-summary": "Update Failure details"
          },
          "404": {
            "description": "Failure not found",
            "x-ms-summary": "Failure not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Failure"
        ]
      }
    },
    "/hazardinitiatingeventnodes": {
      "get": {
        "description": "This returns the paginated results for Hazard Initiating Event Node Entity based on the OData Query Parameters.",
        "operationId": "QueryHazardInitiatingEventNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Hazard Initiating Event Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Hazard Initiating Event Node Entity",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      },
      "post": {
        "description": "This creates a new HazardInitiatingEventNode",
        "operationId": "CreateHazardInitiatingEventNode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
              }
            }
          },
          "description": "Creates a new HazardInitiatingEventNode",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
                }
              }
            },
            "description": "New HazardInitiatingEventNode details added",
            "x-ms-summary": "New HazardInitiatingEventNode details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "HazardInitiatingEventNode not found",
            "x-ms-summary": "HazardInitiatingEventNode not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new HazardInitiatingEventNode",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      }
    },
    "/hazardinitiatingeventnodes/search/{languageCode}": {
      "get": {
        "description": "This searches the Hazard Initiating Event Node Entity",
        "operationId": "SearchHazardInitiatingEventNode",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Hazard Initiating Event Node Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Hazard Initiating Event Node Entity",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      }
    },
    "/hazardinitiatingeventnodes/{id}": {
      "delete": {
        "description": "This deletes a(n) HazardInitiatingEventNode by it's GUID.",
        "operationId": "DeleteHazardInitiatingEventNode",
        "parameters": [
          {
            "description": "HazardInitiatingEventNode id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "HazardInitiatingEventNode id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "HazardInitiatingEventNode Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      },
      "get": {
        "description": "Finds the Hazard Initiating Event Node Entity by it's GUID",
        "operationId": "FindHazardInitiatingEventNodeById",
        "parameters": [
          {
            "description": "Id of the Hazard Initiating Event Node Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Hazard Initiating Event Node Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Hazard Initiating Event Node Entity by id",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      },
      "put": {
        "description": "This updates the HazardInitiatingEventNode entity",
        "operationId": "UpdateHazardInitiatingEventNode",
        "parameters": [
          {
            "description": "Id of the HazardInitiatingEventNode to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "HazardInitiatingEventNode id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
              }
            }
          },
          "description": "HazardInitiatingEventNode that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardInitiatingEventNodeEntity"
                }
              }
            },
            "description": "Update Hazard Initiating Event Node Entity details",
            "x-ms-summary": "Update HazardInitiatingEventNode details"
          },
          "404": {
            "description": "HazardInitiatingEventNode not found",
            "x-ms-summary": "HazardInitiatingEventNode not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "HazardInitiatingEventNode"
        ]
      }
    },
    "/hazards": {
      "get": {
        "description": "This returns the paginated results for Hazard Entity based on the OData Query Parameters.",
        "operationId": "QueryHazard",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HazardEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Hazard Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Hazard Entity",
        "tags": [
          "Hazard"
        ]
      },
      "post": {
        "description": "This creates a new Hazard",
        "operationId": "CreateHazard",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HazardEntity"
              }
            }
          },
          "description": "Creates a new Hazard",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardEntity"
                }
              }
            },
            "description": "New Hazard details added",
            "x-ms-summary": "New Hazard details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Hazard not found",
            "x-ms-summary": "Hazard not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Hazard",
        "tags": [
          "Hazard"
        ]
      }
    },
    "/hazards/search/{languageCode}": {
      "get": {
        "description": "This searches the Hazard Entity",
        "operationId": "SearchHazard",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/HazardEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Hazard Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Hazard Entity",
        "tags": [
          "Hazard"
        ]
      }
    },
    "/hazards/{id}": {
      "delete": {
        "description": "This deletes a(n) Hazard by it's GUID.",
        "operationId": "DeleteHazard",
        "parameters": [
          {
            "description": "Hazard id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Hazard id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Hazard Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Hazard"
        ]
      },
      "get": {
        "description": "Finds the Hazard Entity by it's GUID",
        "operationId": "FindHazardById",
        "parameters": [
          {
            "description": "Id of the Hazard Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Hazard Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Hazard Entity by id",
        "tags": [
          "Hazard"
        ]
      },
      "put": {
        "description": "This updates the Hazard entity",
        "operationId": "UpdateHazard",
        "parameters": [
          {
            "description": "Id of the Hazard to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Hazard id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/HazardEntity"
              }
            }
          },
          "description": "Hazard that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HazardEntity"
                }
              }
            },
            "description": "Update Hazard Entity details",
            "x-ms-summary": "Update Hazard details"
          },
          "404": {
            "description": "Hazard not found",
            "x-ms-summary": "Hazard not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Hazard"
        ]
      }
    },
    "/identityorusers": {
      "get": {
        "description": "This returns the paginated results for Identity Or User Entity based on the OData Query Parameters.",
        "operationId": "QueryIdentityOrUser",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentityOrUserEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Identity Or User Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Identity Or User Entity",
        "tags": [
          "IdentityOrUser"
        ]
      },
      "post": {
        "description": "This creates a new IdentityOrUser",
        "operationId": "CreateIdentityOrUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityOrUserEntity"
              }
            }
          },
          "description": "Creates a new IdentityOrUser",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityOrUserEntity"
                }
              }
            },
            "description": "New IdentityOrUser details added",
            "x-ms-summary": "New IdentityOrUser details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "IdentityOrUser not found",
            "x-ms-summary": "IdentityOrUser not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new IdentityOrUser",
        "tags": [
          "IdentityOrUser"
        ]
      }
    },
    "/identityorusers/search/{languageCode}": {
      "get": {
        "description": "This searches the Identity Or User Entity",
        "operationId": "SearchIdentityOrUser",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/IdentityOrUserEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Identity Or User Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Identity Or User Entity",
        "tags": [
          "IdentityOrUser"
        ]
      }
    },
    "/identityorusers/{id}": {
      "delete": {
        "description": "This deletes a(n) IdentityOrUser by it's GUID.",
        "operationId": "DeleteIdentityOrUser",
        "parameters": [
          {
            "description": "IdentityOrUser id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "IdentityOrUser id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "IdentityOrUser Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "IdentityOrUser"
        ]
      },
      "get": {
        "description": "Finds the Identity Or User Entity by it's GUID",
        "operationId": "FindIdentityOrUserById",
        "parameters": [
          {
            "description": "Id of the Identity Or User Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Identity Or User Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityOrUserEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Identity Or User Entity by id",
        "tags": [
          "IdentityOrUser"
        ]
      },
      "put": {
        "description": "This updates the IdentityOrUser entity",
        "operationId": "UpdateIdentityOrUser",
        "parameters": [
          {
            "description": "Id of the IdentityOrUser to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "IdentityOrUser id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityOrUserEntity"
              }
            }
          },
          "description": "IdentityOrUser that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityOrUserEntity"
                }
              }
            },
            "description": "Update Identity Or User Entity details",
            "x-ms-summary": "Update IdentityOrUser details"
          },
          "404": {
            "description": "IdentityOrUser not found",
            "x-ms-summary": "IdentityOrUser not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "IdentityOrUser"
        ]
      }
    },
    "/import/{id}": {
      "post": {
        "description": "Import Dashboard",
        "operationId": "ImportDashboard",
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Import Dashboard",
        "tags": [
          "Import Dashboard"
        ]
      }
    },
    "/imports/schema/support": {
      "get": {
        "description": "Gets the latest version of X4 supported",
        "operationId": "GetX4SupportedVersion",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureStepEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Latest version supported details",
            "x-ms-summary": "Latest version supported details"
          },
          "400": {
            "description": "Invalid State",
            "x-ms-summary": "Invalid State"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Gets the latest version of X4 supported",
        "tags": [
          "Supported Project"
        ]
      }
    },
    "/imports/{id}": {
      "get": {
        "description": "ImportX4 Event",
        "operationId": "ImportX4",
        "parameters": [
          {
            "description": "Synchronization Metadata Entity Id",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Synchronization Metadata Entity Id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "ImportX4 Event",
        "tags": [
          "ImportX4 Event"
        ]
      }
    },
    "/initiatingeventmodels": {
      "get": {
        "description": "This returns the paginated results for Initiating Event Model Entity based on the OData Query Parameters.",
        "operationId": "QueryInitiatingEventModel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InitiatingEventModelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Initiating Event Model Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Initiating Event Model Entity",
        "tags": [
          "InitiatingEventModel"
        ]
      },
      "post": {
        "description": "This creates a new InitiatingEventModel",
        "operationId": "CreateInitiatingEventModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatingEventModelEntity"
              }
            }
          },
          "description": "Creates a new InitiatingEventModel",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventModelEntity"
                }
              }
            },
            "description": "New InitiatingEventModel details added",
            "x-ms-summary": "New InitiatingEventModel details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "InitiatingEventModel not found",
            "x-ms-summary": "InitiatingEventModel not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new InitiatingEventModel",
        "tags": [
          "InitiatingEventModel"
        ]
      }
    },
    "/initiatingeventmodels/search/{languageCode}": {
      "get": {
        "description": "This searches the Initiating Event Model Entity",
        "operationId": "SearchInitiatingEventModel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InitiatingEventModelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Initiating Event Model Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Initiating Event Model Entity",
        "tags": [
          "InitiatingEventModel"
        ]
      }
    },
    "/initiatingeventmodels/{id}": {
      "delete": {
        "description": "This deletes a(n) InitiatingEventModel by it's GUID.",
        "operationId": "DeleteInitiatingEventModel",
        "parameters": [
          {
            "description": "InitiatingEventModel id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "InitiatingEventModel id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "InitiatingEventModel Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "InitiatingEventModel"
        ]
      },
      "get": {
        "description": "Finds the Initiating Event Model Entity by it's GUID",
        "operationId": "FindInitiatingEventModelById",
        "parameters": [
          {
            "description": "Id of the Initiating Event Model Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Initiating Event Model Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventModelEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Initiating Event Model Entity by id",
        "tags": [
          "InitiatingEventModel"
        ]
      },
      "put": {
        "description": "This updates the InitiatingEventModel entity",
        "operationId": "UpdateInitiatingEventModel",
        "parameters": [
          {
            "description": "Id of the InitiatingEventModel to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "InitiatingEventModel id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatingEventModelEntity"
              }
            }
          },
          "description": "InitiatingEventModel that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventModelEntity"
                }
              }
            },
            "description": "Update Initiating Event Model Entity details",
            "x-ms-summary": "Update InitiatingEventModel details"
          },
          "404": {
            "description": "InitiatingEventModel not found",
            "x-ms-summary": "InitiatingEventModel not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "InitiatingEventModel"
        ]
      }
    },
    "/initiatingevents": {
      "get": {
        "description": "This returns the paginated results for Initiating Event Entity based on the OData Query Parameters.",
        "operationId": "QueryInitiatingEvent",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InitiatingEventEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Initiating Event Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Initiating Event Entity",
        "tags": [
          "InitiatingEvent"
        ]
      },
      "post": {
        "description": "This creates a new InitiatingEvent",
        "operationId": "CreateInitiatingEvent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatingEventEntity"
              }
            }
          },
          "description": "Creates a new InitiatingEvent",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventEntity"
                }
              }
            },
            "description": "New InitiatingEvent details added",
            "x-ms-summary": "New InitiatingEvent details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "InitiatingEvent not found",
            "x-ms-summary": "InitiatingEvent not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new InitiatingEvent",
        "tags": [
          "InitiatingEvent"
        ]
      }
    },
    "/initiatingevents/search/{languageCode}": {
      "get": {
        "description": "This searches the Initiating Event Entity",
        "operationId": "SearchInitiatingEvent",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/InitiatingEventEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Initiating Event Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Initiating Event Entity",
        "tags": [
          "InitiatingEvent"
        ]
      }
    },
    "/initiatingevents/{id}": {
      "delete": {
        "description": "This deletes a(n) InitiatingEvent by it's GUID.",
        "operationId": "DeleteInitiatingEvent",
        "parameters": [
          {
            "description": "InitiatingEvent id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "InitiatingEvent id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "InitiatingEvent Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "InitiatingEvent"
        ]
      },
      "get": {
        "description": "Finds the Initiating Event Entity by it's GUID",
        "operationId": "FindInitiatingEventById",
        "parameters": [
          {
            "description": "Id of the Initiating Event Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Initiating Event Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Initiating Event Entity by id",
        "tags": [
          "InitiatingEvent"
        ]
      },
      "put": {
        "description": "This updates the InitiatingEvent entity",
        "operationId": "UpdateInitiatingEvent",
        "parameters": [
          {
            "description": "Id of the InitiatingEvent to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "InitiatingEvent id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatingEventEntity"
              }
            }
          },
          "description": "InitiatingEvent that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatingEventEntity"
                }
              }
            },
            "description": "Update Initiating Event Entity details",
            "x-ms-summary": "Update InitiatingEvent details"
          },
          "404": {
            "description": "InitiatingEvent not found",
            "x-ms-summary": "InitiatingEvent not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "InitiatingEvent"
        ]
      }
    },
    "/labels": {
      "get": {
        "description": "This returns the paginated results for Label Entity based on the OData Query Parameters.",
        "operationId": "QueryLabel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LabelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Label Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Label Entity",
        "tags": [
          "Label"
        ]
      },
      "post": {
        "description": "This creates a new Label",
        "operationId": "CreateLabel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelEntity"
              }
            }
          },
          "description": "Creates a new Label",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelEntity"
                }
              }
            },
            "description": "New Label details added",
            "x-ms-summary": "New Label details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Label not found",
            "x-ms-summary": "Label not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Label",
        "tags": [
          "Label"
        ]
      }
    },
    "/labels/search/{languageCode}": {
      "get": {
        "description": "This searches the Label Entity",
        "operationId": "SearchLabel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LabelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Label Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Label Entity",
        "tags": [
          "Label"
        ]
      }
    },
    "/labels/{id}": {
      "delete": {
        "description": "This deletes a(n) Label by it's GUID.",
        "operationId": "DeleteLabel",
        "parameters": [
          {
            "description": "Label id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Label id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Label Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Label"
        ]
      },
      "get": {
        "description": "Finds the Label Entity by it's GUID",
        "operationId": "FindLabelById",
        "parameters": [
          {
            "description": "Id of the Label Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Label Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Label Entity by id",
        "tags": [
          "Label"
        ]
      },
      "put": {
        "description": "This updates the Label entity",
        "operationId": "UpdateLabel",
        "parameters": [
          {
            "description": "Id of the Label to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Label id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelEntity"
              }
            }
          },
          "description": "Label that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelEntity"
                }
              }
            },
            "description": "Update Label Entity details",
            "x-ms-summary": "Update Label details"
          },
          "404": {
            "description": "Label not found",
            "x-ms-summary": "Label not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Label"
        ]
      }
    },
    "/locations": {
      "get": {
        "description": "This returns the paginated results for Location Entity based on the OData Query Parameters.",
        "operationId": "QueryLocation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Location Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Location Entity",
        "tags": [
          "Location"
        ]
      },
      "post": {
        "description": "This creates a new Location",
        "operationId": "CreateLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationEntity"
              }
            }
          },
          "description": "Creates a new Location",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationEntity"
                }
              }
            },
            "description": "New Location details added",
            "x-ms-summary": "New Location details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Location not found",
            "x-ms-summary": "Location not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Location",
        "tags": [
          "Location"
        ]
      }
    },
    "/locations/search/{languageCode}": {
      "get": {
        "description": "This searches the Location Entity",
        "operationId": "SearchLocation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/LocationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Location Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Location Entity",
        "tags": [
          "Location"
        ]
      }
    },
    "/locations/{id}": {
      "delete": {
        "description": "This deletes a(n) Location by it's GUID.",
        "operationId": "DeleteLocation",
        "parameters": [
          {
            "description": "Location id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Location id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Location Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Location"
        ]
      },
      "get": {
        "description": "Finds the Location Entity by it's GUID",
        "operationId": "FindLocationById",
        "parameters": [
          {
            "description": "Id of the Location Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Location Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Location Entity by id",
        "tags": [
          "Location"
        ]
      },
      "put": {
        "description": "This updates the Location entity",
        "operationId": "UpdateLocation",
        "parameters": [
          {
            "description": "Id of the Location to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Location id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocationEntity"
              }
            }
          },
          "description": "Location that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationEntity"
                }
              }
            },
            "description": "Update Location Entity details",
            "x-ms-summary": "Update Location details"
          },
          "404": {
            "description": "Location not found",
            "x-ms-summary": "Location not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Location"
        ]
      }
    },
    "/manufacturers": {
      "get": {
        "description": "This returns the paginated results for Manufacturer Entity based on the OData Query Parameters.",
        "operationId": "QueryManufacturer",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManufacturerEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Manufacturer Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Manufacturer Entity",
        "tags": [
          "Manufacturer"
        ]
      },
      "post": {
        "description": "This creates a new Manufacturer",
        "operationId": "CreateManufacturer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManufacturerEntity"
              }
            }
          },
          "description": "Creates a new Manufacturer",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManufacturerEntity"
                }
              }
            },
            "description": "New Manufacturer details added",
            "x-ms-summary": "New Manufacturer details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Manufacturer not found",
            "x-ms-summary": "Manufacturer not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Manufacturer",
        "tags": [
          "Manufacturer"
        ]
      }
    },
    "/manufacturers/search/{languageCode}": {
      "get": {
        "description": "This searches the Manufacturer Entity",
        "operationId": "SearchManufacturer",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ManufacturerEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Manufacturer Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Manufacturer Entity",
        "tags": [
          "Manufacturer"
        ]
      }
    },
    "/manufacturers/{id}": {
      "delete": {
        "description": "This deletes a(n) Manufacturer by it's GUID.",
        "operationId": "DeleteManufacturer",
        "parameters": [
          {
            "description": "Manufacturer id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Manufacturer id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Manufacturer Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Manufacturer"
        ]
      },
      "get": {
        "description": "Finds the Manufacturer Entity by it's GUID",
        "operationId": "FindManufacturerById",
        "parameters": [
          {
            "description": "Id of the Manufacturer Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Manufacturer Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManufacturerEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Manufacturer Entity by id",
        "tags": [
          "Manufacturer"
        ]
      },
      "put": {
        "description": "This updates the Manufacturer entity",
        "operationId": "UpdateManufacturer",
        "parameters": [
          {
            "description": "Id of the Manufacturer to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Manufacturer id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManufacturerEntity"
              }
            }
          },
          "description": "Manufacturer that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ManufacturerEntity"
                }
              }
            },
            "description": "Update Manufacturer Entity details",
            "x-ms-summary": "Update Manufacturer details"
          },
          "404": {
            "description": "Manufacturer not found",
            "x-ms-summary": "Manufacturer not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Manufacturer"
        ]
      }
    },
    "/me": {
      "get": {
        "description": "This retrieves the current User Entity",
        "operationId": "GetMe",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            },
            "description": "User details retrieved",
            "x-ms-summary": "User details retrieved"
          },
          "404": {
            "description": "User not found",
            "x-ms-summary": "User not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Get the current User",
        "tags": [
          "User"
        ]
      }
    },
    "/modifiermodels": {
      "get": {
        "description": "This returns the paginated results for Modifier Model Entity based on the OData Query Parameters.",
        "operationId": "QueryModifierModel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModifierModelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Modifier Model Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Modifier Model Entity",
        "tags": [
          "ModifierModel"
        ]
      },
      "post": {
        "description": "This creates a new ModifierModel",
        "operationId": "CreateModifierModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierModelEntity"
              }
            }
          },
          "description": "Creates a new ModifierModel",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierModelEntity"
                }
              }
            },
            "description": "New ModifierModel details added",
            "x-ms-summary": "New ModifierModel details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ModifierModel not found",
            "x-ms-summary": "ModifierModel not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ModifierModel",
        "tags": [
          "ModifierModel"
        ]
      }
    },
    "/modifiermodels/search/{languageCode}": {
      "get": {
        "description": "This searches the Modifier Model Entity",
        "operationId": "SearchModifierModel",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModifierModelEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Modifier Model Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Modifier Model Entity",
        "tags": [
          "ModifierModel"
        ]
      }
    },
    "/modifiermodels/{id}": {
      "delete": {
        "description": "This deletes a(n) ModifierModel by it's GUID.",
        "operationId": "DeleteModifierModel",
        "parameters": [
          {
            "description": "ModifierModel id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ModifierModel id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ModifierModel Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ModifierModel"
        ]
      },
      "get": {
        "description": "Finds the Modifier Model Entity by it's GUID",
        "operationId": "FindModifierModelById",
        "parameters": [
          {
            "description": "Id of the Modifier Model Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier Model Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierModelEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Modifier Model Entity by id",
        "tags": [
          "ModifierModel"
        ]
      },
      "put": {
        "description": "This updates the ModifierModel entity",
        "operationId": "UpdateModifierModel",
        "parameters": [
          {
            "description": "Id of the ModifierModel to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ModifierModel id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierModelEntity"
              }
            }
          },
          "description": "ModifierModel that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierModelEntity"
                }
              }
            },
            "description": "Update Modifier Model Entity details",
            "x-ms-summary": "Update ModifierModel details"
          },
          "404": {
            "description": "ModifierModel not found",
            "x-ms-summary": "ModifierModel not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ModifierModel"
        ]
      }
    },
    "/modifiers": {
      "get": {
        "description": "This returns the paginated results for Modifier Entity based on the OData Query Parameters.",
        "operationId": "QueryModifier",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModifierEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Modifier Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Modifier Entity",
        "tags": [
          "Modifier"
        ]
      },
      "post": {
        "description": "This creates a new Modifier",
        "operationId": "CreateModifier",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierEntity"
              }
            }
          },
          "description": "Creates a new Modifier",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierEntity"
                }
              }
            },
            "description": "New Modifier details added",
            "x-ms-summary": "New Modifier details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Modifier not found",
            "x-ms-summary": "Modifier not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Modifier",
        "tags": [
          "Modifier"
        ]
      }
    },
    "/modifiers/search/{languageCode}": {
      "get": {
        "description": "This searches the Modifier Entity",
        "operationId": "SearchModifier",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ModifierEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Modifier Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Modifier Entity",
        "tags": [
          "Modifier"
        ]
      }
    },
    "/modifiers/{id}": {
      "delete": {
        "description": "This deletes a(n) Modifier by it's GUID.",
        "operationId": "DeleteModifier",
        "parameters": [
          {
            "description": "Modifier id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Modifier Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Modifier"
        ]
      },
      "get": {
        "description": "Finds the Modifier Entity by it's GUID",
        "operationId": "FindModifierById",
        "parameters": [
          {
            "description": "Id of the Modifier Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Modifier Entity by id",
        "tags": [
          "Modifier"
        ]
      },
      "put": {
        "description": "This updates the Modifier entity",
        "operationId": "UpdateModifier",
        "parameters": [
          {
            "description": "Id of the Modifier to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierEntity"
              }
            }
          },
          "description": "Modifier that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModifierEntity"
                }
              }
            },
            "description": "Update Modifier Entity details",
            "x-ms-summary": "Update Modifier details"
          },
          "404": {
            "description": "Modifier not found",
            "x-ms-summary": "Modifier not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Modifier"
        ]
      }
    },
    "/modifiers/{id}/groups": {
      "get": {
        "description": "Finds Groups by the Modifier Id",
        "operationId": "FindAreaDeviceNodeGroupingEntitiesById",
        "parameters": [
          {
            "description": "ID of the Modifier",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier ID"
          },
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/AreaDeviceNodeGroupingEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "AreaDeviceNodeGrouping details",
            "x-ms-summary": "AreaDeviceNodeGrouping details"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "AreaDeviceNodeGrouping not found",
            "x-ms-summary": "AreaDeviceNodeGrouping not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Finds Groups by the Modifier Id",
        "tags": [
          "Modifier"
        ]
      }
    },
    "/modifiers/{modifierId}/groups/{groupId}": {
      "delete": {
        "description": "This deletes a new AreaDeviceNodeGroupingEntity",
        "operationId": "DeleteAreaDeviceNodeGroupingEntityLink",
        "parameters": [
          {
            "description": "ID of the Modifier",
            "in": "path",
            "name": "modifierId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier ID"
          },
          {
            "description": "ID of the Group",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Group ID"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "AreaDeviceNodeGrouping Deleted successfully"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Entity not found",
            "x-ms-summary": "Entity not found"
          },
          "500": {
            "description": "Internal Error",
            "x-ms-summary": "Internal Error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes AreaDeviceNodeGroupingEntity",
        "tags": [
          "Modifier"
        ]
      },
      "post": {
        "description": "This creates a new AreaDeviceNodeGroupingEntity link to a Modifier",
        "operationId": "CreateAreaDeviceNodeGroupingEntityLink",
        "parameters": [
          {
            "description": "ID of the Modifier",
            "in": "path",
            "name": "modifierId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Modifier ID"
          },
          {
            "description": "ID of the Group",
            "in": "path",
            "name": "groupId",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Group ID"
          }
        ],
        "responses": {
          "200": {
            "description": "AreaDeviceNodeGrouping link created successfully",
            "x-ms-summary": "AreaDeviceNodeGrouping link created successfully"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Entity not found",
            "x-ms-summary": "Entity not found"
          },
          "500": {
            "description": "Internal Error",
            "x-ms-summary": "Internal Error"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new AreaDeviceNodeGroupingEntity link to a Modifier",
        "tags": [
          "Modifier"
        ]
      }
    },
    "/notification/license": {
      "get": {
        "description": "Notification for license information",
        "operationId": "NotificationProcessor",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful operation",
            "x-ms-summary": "Successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Notification for license information",
        "tags": [
          "Notification"
        ]
      }
    },
    "/notifications/{id}": {
      "get": {
        "description": "Finds the Notification Entity by it's GUID",
        "operationId": "FindNotificationById",
        "parameters": [
          {
            "description": "Id of the Notification Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Notification Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Notification Entity by id",
        "tags": [
          "Notification"
        ]
      }
    },
    "/procedureinstances": {
      "get": {
        "description": "This returns the paginated results for Procedure Instance Entity based on the OData Query Parameters.",
        "operationId": "QueryProcedureInstance",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureInstanceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Instance Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Procedure Instance Entity",
        "tags": [
          "ProcedureInstance"
        ]
      },
      "post": {
        "description": "This creates a new ProcedureInstance",
        "operationId": "CreateProcedureInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureInstanceEntity"
              }
            }
          },
          "description": "Creates a new ProcedureInstance",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureInstanceEntity"
                }
              }
            },
            "description": "New ProcedureInstance details added",
            "x-ms-summary": "New ProcedureInstance details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ProcedureInstance not found",
            "x-ms-summary": "ProcedureInstance not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ProcedureInstance",
        "tags": [
          "ProcedureInstance"
        ]
      }
    },
    "/procedureinstances/search/{languageCode}": {
      "get": {
        "description": "This searches the Procedure Instance Entity",
        "operationId": "SearchProcedureInstance",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureInstanceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Instance Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Procedure Instance Entity",
        "tags": [
          "ProcedureInstance"
        ]
      }
    },
    "/procedureinstances/{id}": {
      "delete": {
        "description": "This deletes a(n) ProcedureInstance by it's GUID.",
        "operationId": "DeleteProcedureInstance",
        "parameters": [
          {
            "description": "ProcedureInstance id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcedureInstance id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ProcedureInstance Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ProcedureInstance"
        ]
      },
      "get": {
        "description": "Finds the Procedure Instance Entity by it's GUID",
        "operationId": "FindProcedureInstanceById",
        "parameters": [
          {
            "description": "Id of the Procedure Instance Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure Instance Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureInstanceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Procedure Instance Entity by id",
        "tags": [
          "ProcedureInstance"
        ]
      },
      "put": {
        "description": "This updates the ProcedureInstance entity",
        "operationId": "UpdateProcedureInstance",
        "parameters": [
          {
            "description": "Id of the ProcedureInstance to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcedureInstance id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureInstanceEntity"
              }
            }
          },
          "description": "ProcedureInstance that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureInstanceEntity"
                }
              }
            },
            "description": "Update Procedure Instance Entity details",
            "x-ms-summary": "Update ProcedureInstance details"
          },
          "404": {
            "description": "ProcedureInstance not found",
            "x-ms-summary": "ProcedureInstance not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ProcedureInstance"
        ]
      }
    },
    "/procedureinstances/{id}/events": {
      "get": {
        "description": "Find Events By Procedure Instance Id",
        "operationId": "FindEventsLinkedToProcedureInstance",
        "parameters": [
          {
            "description": "Id of the Procedure Instance Entity",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure Instance Entity Iid"
          },
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/EventMetadataEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Event details",
            "x-ms-summary": "Event details"
          },
          "404": {
            "description": "Events not found",
            "x-ms-summary": "Events not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Events By Procedure Instance Id",
        "tags": [
          "ProcedureInstance"
        ]
      }
    },
    "/procedures": {
      "get": {
        "description": "This returns the paginated results for Procedure Entity based on the OData Query Parameters.",
        "operationId": "QueryProcedure",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Procedure Entity",
        "tags": [
          "Procedure"
        ]
      },
      "post": {
        "description": "This creates a new Procedure",
        "operationId": "CreateProcedure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureEntity"
              }
            }
          },
          "description": "Creates a new Procedure",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureEntity"
                }
              }
            },
            "description": "New Procedure details added",
            "x-ms-summary": "New Procedure details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Procedure not found",
            "x-ms-summary": "Procedure not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Procedure",
        "tags": [
          "Procedure"
        ]
      }
    },
    "/procedures/search/{languageCode}": {
      "get": {
        "description": "This searches the Procedure Entity",
        "operationId": "SearchProcedure",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Procedure Entity",
        "tags": [
          "Procedure"
        ]
      }
    },
    "/procedures/{id}": {
      "delete": {
        "description": "This deletes a(n) Procedure by it's GUID.",
        "operationId": "DeleteProcedure",
        "parameters": [
          {
            "description": "Procedure id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Procedure Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Procedure"
        ]
      },
      "get": {
        "description": "Finds the Procedure Entity by it's GUID",
        "operationId": "FindProcedureById",
        "parameters": [
          {
            "description": "Id of the Procedure Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Procedure Entity by id",
        "tags": [
          "Procedure"
        ]
      },
      "put": {
        "description": "This updates the Procedure entity",
        "operationId": "UpdateProcedure",
        "parameters": [
          {
            "description": "Id of the Procedure to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureEntity"
              }
            }
          },
          "description": "Procedure that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureEntity"
                }
              }
            },
            "description": "Update Procedure Entity details",
            "x-ms-summary": "Update Procedure details"
          },
          "404": {
            "description": "Procedure not found",
            "x-ms-summary": "Procedure not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Procedure"
        ]
      }
    },
    "/procedures/{id}/steps": {
      "get": {
        "description": "Finds Procedure Steps by the Procedure Id",
        "operationId": "FindProcedureStepsById",
        "parameters": [
          {
            "description": "ID of the Procedure",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureStepEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Procedure Steps details",
            "x-ms-summary": "Procedure Steps details"
          },
          "400": {
            "description": "Invalid State",
            "x-ms-summary": "Invalid State"
          },
          "404": {
            "description": "Procedure Steps not found",
            "x-ms-summary": "Procedure Steps not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Finds Procedure Steps by the Procedure Id",
        "tags": [
          "Procedure"
        ]
      }
    },
    "/proceduresteps": {
      "get": {
        "description": "This returns the paginated results for Procedure Step Entity based on the OData Query Parameters.",
        "operationId": "QueryProcedureStep",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureStepEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Step Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Procedure Step Entity",
        "tags": [
          "ProcedureStep"
        ]
      },
      "post": {
        "description": "This creates a new ProcedureStep",
        "operationId": "CreateProcedureStep",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureStepEntity"
              }
            }
          },
          "description": "Creates a new ProcedureStep",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureStepEntity"
                }
              }
            },
            "description": "New ProcedureStep details added",
            "x-ms-summary": "New ProcedureStep details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ProcedureStep not found",
            "x-ms-summary": "ProcedureStep not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ProcedureStep",
        "tags": [
          "ProcedureStep"
        ]
      }
    },
    "/proceduresteps/search/{languageCode}": {
      "get": {
        "description": "This searches the Procedure Step Entity",
        "operationId": "SearchProcedureStep",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcedureStepEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Procedure Step Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Procedure Step Entity",
        "tags": [
          "ProcedureStep"
        ]
      }
    },
    "/proceduresteps/{id}": {
      "delete": {
        "description": "This deletes a(n) ProcedureStep by it's GUID.",
        "operationId": "DeleteProcedureStep",
        "parameters": [
          {
            "description": "ProcedureStep id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcedureStep id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ProcedureStep Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ProcedureStep"
        ]
      },
      "get": {
        "description": "Finds the Procedure Step Entity by it's GUID",
        "operationId": "FindProcedureStepById",
        "parameters": [
          {
            "description": "Id of the Procedure Step Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Procedure Step Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureStepEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Procedure Step Entity by id",
        "tags": [
          "ProcedureStep"
        ]
      },
      "put": {
        "description": "This updates the ProcedureStep entity",
        "operationId": "UpdateProcedureStep",
        "parameters": [
          {
            "description": "Id of the ProcedureStep to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcedureStep id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcedureStepEntity"
              }
            }
          },
          "description": "ProcedureStep that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcedureStepEntity"
                }
              }
            },
            "description": "Update Procedure Step Entity details",
            "x-ms-summary": "Update ProcedureStep details"
          },
          "404": {
            "description": "ProcedureStep not found",
            "x-ms-summary": "ProcedureStep not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ProcedureStep"
        ]
      }
    },
    "/processinformations": {
      "get": {
        "description": "This returns the paginated results for Process Information Entity based on the OData Query Parameters.",
        "operationId": "QueryProcessInformation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcessInformationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Process Information Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Process Information Entity",
        "tags": [
          "ProcessInformation"
        ]
      },
      "post": {
        "description": "This creates a new ProcessInformation",
        "operationId": "CreateProcessInformation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessInformationEntity"
              }
            }
          },
          "description": "Creates a new ProcessInformation",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInformationEntity"
                }
              }
            },
            "description": "New ProcessInformation details added",
            "x-ms-summary": "New ProcessInformation details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ProcessInformation not found",
            "x-ms-summary": "ProcessInformation not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ProcessInformation",
        "tags": [
          "ProcessInformation"
        ]
      }
    },
    "/processinformations/search/{languageCode}": {
      "get": {
        "description": "This searches the Process Information Entity",
        "operationId": "SearchProcessInformation",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcessInformationEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Process Information Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Process Information Entity",
        "tags": [
          "ProcessInformation"
        ]
      }
    },
    "/processinformations/{id}": {
      "delete": {
        "description": "This deletes a(n) ProcessInformation by it's GUID.",
        "operationId": "DeleteProcessInformation",
        "parameters": [
          {
            "description": "ProcessInformation id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcessInformation id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ProcessInformation Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ProcessInformation"
        ]
      },
      "get": {
        "description": "Finds the Process Information Entity by it's GUID",
        "operationId": "FindProcessInformationById",
        "parameters": [
          {
            "description": "Id of the Process Information Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Process Information Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInformationEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Process Information Entity by id",
        "tags": [
          "ProcessInformation"
        ]
      },
      "put": {
        "description": "This updates the ProcessInformation entity",
        "operationId": "UpdateProcessInformation",
        "parameters": [
          {
            "description": "Id of the ProcessInformation to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcessInformation id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessInformationEntity"
              }
            }
          },
          "description": "ProcessInformation that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessInformationEntity"
                }
              }
            },
            "description": "Update Process Information Entity details",
            "x-ms-summary": "Update ProcessInformation details"
          },
          "404": {
            "description": "ProcessInformation not found",
            "x-ms-summary": "ProcessInformation not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ProcessInformation"
        ]
      }
    },
    "/processtypes": {
      "get": {
        "description": "This returns the paginated results for Process Type Entity based on the OData Query Parameters.",
        "operationId": "QueryProcessType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcessTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Process Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Process Type Entity",
        "tags": [
          "ProcessType"
        ]
      },
      "post": {
        "description": "This creates a new ProcessType",
        "operationId": "CreateProcessType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessTypeEntity"
              }
            }
          },
          "description": "Creates a new ProcessType",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTypeEntity"
                }
              }
            },
            "description": "New ProcessType details added",
            "x-ms-summary": "New ProcessType details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ProcessType not found",
            "x-ms-summary": "ProcessType not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ProcessType",
        "tags": [
          "ProcessType"
        ]
      }
    },
    "/processtypes/search/{languageCode}": {
      "get": {
        "description": "This searches the Process Type Entity",
        "operationId": "SearchProcessType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProcessTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Process Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Process Type Entity",
        "tags": [
          "ProcessType"
        ]
      }
    },
    "/processtypes/{id}": {
      "delete": {
        "description": "This deletes a(n) ProcessType by it's GUID.",
        "operationId": "DeleteProcessType",
        "parameters": [
          {
            "description": "ProcessType id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcessType id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ProcessType Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ProcessType"
        ]
      },
      "get": {
        "description": "Finds the Process Type Entity by it's GUID",
        "operationId": "FindProcessTypeById",
        "parameters": [
          {
            "description": "Id of the Process Type Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Process Type Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTypeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Process Type Entity by id",
        "tags": [
          "ProcessType"
        ]
      },
      "put": {
        "description": "This updates the ProcessType entity",
        "operationId": "UpdateProcessType",
        "parameters": [
          {
            "description": "Id of the ProcessType to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProcessType id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessTypeEntity"
              }
            }
          },
          "description": "ProcessType that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessTypeEntity"
                }
              }
            },
            "description": "Update Process Type Entity details",
            "x-ms-summary": "Update ProcessType details"
          },
          "404": {
            "description": "ProcessType not found",
            "x-ms-summary": "ProcessType not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ProcessType"
        ]
      }
    },
    "/proveninuses": {
      "get": {
        "description": "This returns the paginated results for Proven In Use Entity based on the OData Query Parameters.",
        "operationId": "QueryProvenInUse",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProvenInUseEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Proven In Use Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Proven In Use Entity",
        "tags": [
          "ProvenInUse"
        ]
      },
      "post": {
        "description": "This creates a new ProvenInUse",
        "operationId": "CreateProvenInUse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvenInUseEntity"
              }
            }
          },
          "description": "Creates a new ProvenInUse",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvenInUseEntity"
                }
              }
            },
            "description": "New ProvenInUse details added",
            "x-ms-summary": "New ProvenInUse details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ProvenInUse not found",
            "x-ms-summary": "ProvenInUse not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ProvenInUse",
        "tags": [
          "ProvenInUse"
        ]
      }
    },
    "/proveninuses/search/{languageCode}": {
      "get": {
        "description": "This searches the Proven In Use Entity",
        "operationId": "SearchProvenInUse",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ProvenInUseEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Proven In Use Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Proven In Use Entity",
        "tags": [
          "ProvenInUse"
        ]
      }
    },
    "/proveninuses/{id}": {
      "delete": {
        "description": "This deletes a(n) ProvenInUse by it's GUID.",
        "operationId": "DeleteProvenInUse",
        "parameters": [
          {
            "description": "ProvenInUse id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProvenInUse id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ProvenInUse Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ProvenInUse"
        ]
      },
      "get": {
        "description": "Finds the Proven In Use Entity by it's GUID",
        "operationId": "FindProvenInUseById",
        "parameters": [
          {
            "description": "Id of the Proven In Use Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Proven In Use Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvenInUseEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Proven In Use Entity by id",
        "tags": [
          "ProvenInUse"
        ]
      },
      "put": {
        "description": "This updates the ProvenInUse entity",
        "operationId": "UpdateProvenInUse",
        "parameters": [
          {
            "description": "Id of the ProvenInUse to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ProvenInUse id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProvenInUseEntity"
              }
            }
          },
          "description": "ProvenInUse that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProvenInUseEntity"
                }
              }
            },
            "description": "Update Proven In Use Entity details",
            "x-ms-summary": "Update ProvenInUse details"
          },
          "404": {
            "description": "ProvenInUse not found",
            "x-ms-summary": "ProvenInUse not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ProvenInUse"
        ]
      }
    },
    "/references": {
      "get": {
        "description": "This returns the paginated results for Reference Entity based on the OData Query Parameters.",
        "operationId": "QueryReference",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReferenceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Reference Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Reference Entity",
        "tags": [
          "Reference"
        ]
      },
      "post": {
        "description": "This creates a new Reference",
        "operationId": "CreateReference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceEntity"
              }
            }
          },
          "description": "Creates a new Reference",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceEntity"
                }
              }
            },
            "description": "New Reference details added",
            "x-ms-summary": "New Reference details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Reference not found",
            "x-ms-summary": "Reference not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Reference",
        "tags": [
          "Reference"
        ]
      }
    },
    "/references/search/{languageCode}": {
      "get": {
        "description": "This searches the Reference Entity",
        "operationId": "SearchReference",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReferenceEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Reference Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Reference Entity",
        "tags": [
          "Reference"
        ]
      }
    },
    "/references/{id}": {
      "delete": {
        "description": "This deletes a(n) Reference by it's GUID.",
        "operationId": "DeleteReference",
        "parameters": [
          {
            "description": "Reference id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Reference id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Reference Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Reference"
        ]
      },
      "get": {
        "description": "Finds the Reference Entity by it's GUID",
        "operationId": "FindReferenceById",
        "parameters": [
          {
            "description": "Id of the Reference Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Reference Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Reference Entity by id",
        "tags": [
          "Reference"
        ]
      },
      "put": {
        "description": "This updates the Reference entity",
        "operationId": "UpdateReference",
        "parameters": [
          {
            "description": "Id of the Reference to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Reference id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceEntity"
              }
            }
          },
          "description": "Reference that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceEntity"
                }
              }
            },
            "description": "Update Reference Entity details",
            "x-ms-summary": "Update Reference details"
          },
          "404": {
            "description": "Reference not found",
            "x-ms-summary": "Reference not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Reference"
        ]
      }
    },
    "/referencetypes": {
      "get": {
        "description": "This returns the paginated results for Reference Type Entity based on the OData Query Parameters.",
        "operationId": "QueryReferenceType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReferenceTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Reference Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Reference Type Entity",
        "tags": [
          "ReferenceType"
        ]
      },
      "post": {
        "description": "This creates a new ReferenceType",
        "operationId": "CreateReferenceType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceTypeEntity"
              }
            }
          },
          "description": "Creates a new ReferenceType",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceTypeEntity"
                }
              }
            },
            "description": "New ReferenceType details added",
            "x-ms-summary": "New ReferenceType details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "ReferenceType not found",
            "x-ms-summary": "ReferenceType not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new ReferenceType",
        "tags": [
          "ReferenceType"
        ]
      }
    },
    "/referencetypes/search/{languageCode}": {
      "get": {
        "description": "This searches the Reference Type Entity",
        "operationId": "SearchReferenceType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ReferenceTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Reference Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Reference Type Entity",
        "tags": [
          "ReferenceType"
        ]
      }
    },
    "/referencetypes/{id}": {
      "delete": {
        "description": "This deletes a(n) ReferenceType by it's GUID.",
        "operationId": "DeleteReferenceType",
        "parameters": [
          {
            "description": "ReferenceType id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ReferenceType id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "ReferenceType Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "ReferenceType"
        ]
      },
      "get": {
        "description": "Finds the Reference Type Entity by it's GUID",
        "operationId": "FindReferenceTypeById",
        "parameters": [
          {
            "description": "Id of the Reference Type Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Reference Type Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceTypeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Reference Type Entity by id",
        "tags": [
          "ReferenceType"
        ]
      },
      "put": {
        "description": "This updates the ReferenceType entity",
        "operationId": "UpdateReferenceType",
        "parameters": [
          {
            "description": "Id of the ReferenceType to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "ReferenceType id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceTypeEntity"
              }
            }
          },
          "description": "ReferenceType that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceTypeEntity"
                }
              }
            },
            "description": "Update Reference Type Entity details",
            "x-ms-summary": "Update ReferenceType details"
          },
          "404": {
            "description": "ReferenceType not found",
            "x-ms-summary": "ReferenceType not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "ReferenceType"
        ]
      }
    },
    "/repairtypes": {
      "get": {
        "description": "This returns the paginated results for Repair Type Entity based on the OData Query Parameters.",
        "operationId": "QueryRepairType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RepairTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Repair Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Repair Type Entity",
        "tags": [
          "RepairType"
        ]
      },
      "post": {
        "description": "This creates a new RepairType",
        "operationId": "CreateRepairType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairTypeEntity"
              }
            }
          },
          "description": "Creates a new RepairType",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepairTypeEntity"
                }
              }
            },
            "description": "New RepairType details added",
            "x-ms-summary": "New RepairType details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "RepairType not found",
            "x-ms-summary": "RepairType not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new RepairType",
        "tags": [
          "RepairType"
        ]
      }
    },
    "/repairtypes/search/{languageCode}": {
      "get": {
        "description": "This searches the Repair Type Entity",
        "operationId": "SearchRepairType",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RepairTypeEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Repair Type Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Repair Type Entity",
        "tags": [
          "RepairType"
        ]
      }
    },
    "/repairtypes/{id}": {
      "delete": {
        "description": "This deletes a(n) RepairType by it's GUID.",
        "operationId": "DeleteRepairType",
        "parameters": [
          {
            "description": "RepairType id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "RepairType id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "RepairType Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "RepairType"
        ]
      },
      "get": {
        "description": "Finds the Repair Type Entity by it's GUID",
        "operationId": "FindRepairTypeById",
        "parameters": [
          {
            "description": "Id of the Repair Type Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Repair Type Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepairTypeEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Repair Type Entity by id",
        "tags": [
          "RepairType"
        ]
      },
      "put": {
        "description": "This updates the RepairType entity",
        "operationId": "UpdateRepairType",
        "parameters": [
          {
            "description": "Id of the RepairType to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "RepairType id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepairTypeEntity"
              }
            }
          },
          "description": "RepairType that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepairTypeEntity"
                }
              }
            },
            "description": "Update Repair Type Entity details",
            "x-ms-summary": "Update RepairType details"
          },
          "404": {
            "description": "RepairType not found",
            "x-ms-summary": "RepairType not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "RepairType"
        ]
      }
    },
    "/reports": {
      "get": {
        "description": "This returns the paginated results for Report Entity based on the OData Query Parameters.",
        "operationId": "QueryReport",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Report Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Report Entity",
        "tags": [
          "Report"
        ]
      },
      "post": {
        "description": "This creates a new Report",
        "operationId": "CreateReportEntity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Creates a new Report",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "New Report details added",
            "x-ms-summary": "New Report details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Report not found",
            "x-ms-summary": "Report not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Report",
        "tags": [
          "Report"
        ]
      }
    },
    "/reports/search/{languageCode}": {
      "get": {
        "description": "This searches the Report Entity",
        "operationId": "SearchReport",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "type": "object"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Report Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Report Entity",
        "tags": [
          "Report"
        ]
      }
    },
    "/reports/{id}": {
      "delete": {
        "description": "This deletes a(n) Report by it's GUID.",
        "operationId": "DeleteReport",
        "parameters": [
          {
            "description": "Report id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Report id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Report Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Report"
        ]
      },
      "get": {
        "description": "Finds the Report Entity by it's GUID",
        "operationId": "FindReportById",
        "parameters": [
          {
            "description": "Id of the Report Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Report Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Report Entity by id",
        "tags": [
          "Report"
        ]
      },
      "put": {
        "description": "This updates the Report entity",
        "operationId": "UpdateReport",
        "parameters": [
          {
            "description": "Id of the Report to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Report id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "Report that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Update Report Entity details",
            "x-ms-summary": "Update Report details"
          },
          "404": {
            "description": "Report not found",
            "x-ms-summary": "Report not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Report"
        ]
      }
    },
    "/reports/{id}/end": {
      "put": {
        "description": "This cancels the generation of the Report",
        "operationId": "CancelReport",
        "parameters": [
          {
            "description": "Id of the Report to cancel generation",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Report id to cancel"
          }
        ],
        "responses": {
          "200": {
            "description": "Report canceled",
            "x-ms-summary": "Report canceled"
          },
          "404": {
            "description": "Report not found",
            "x-ms-summary": "Report not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Cancel Report",
        "tags": [
          "Report"
        ]
      }
    },
    "/reports/{id}/start": {
      "put": {
        "description": "This starts the generation of the Report",
        "operationId": "StartReport",
        "parameters": [
          {
            "description": "Id of the Report to start generation",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Report id to start"
          }
        ],
        "responses": {
          "404": {
            "description": "Report not found",
            "x-ms-summary": "Report not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Start Report",
        "tags": [
          "Report"
        ]
      }
    },
    "/roles": {
      "get": {
        "description": "This returns the paginated results for Role Entity based on the OData Query Parameters.",
        "operationId": "QueryRole",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RoleEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Role Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Role Entity",
        "tags": [
          "Role"
        ]
      },
      "post": {
        "description": "This creates a new Role",
        "operationId": "CreateRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleEntity"
              }
            }
          },
          "description": "Creates a new Role",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            },
            "description": "New Role details added",
            "x-ms-summary": "New Role details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Role not found",
            "x-ms-summary": "Role not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Role",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/search/{languageCode}": {
      "get": {
        "description": "This searches the Role Entity",
        "operationId": "SearchRole",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/RoleEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Role Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Role Entity",
        "tags": [
          "Role"
        ]
      }
    },
    "/roles/{id}": {
      "delete": {
        "description": "This deletes a(n) Role by it's GUID.",
        "operationId": "DeleteRole",
        "parameters": [
          {
            "description": "Role id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Role id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Role Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Role"
        ]
      },
      "get": {
        "description": "Finds the Role Entity by it's GUID",
        "operationId": "FindRoleById",
        "parameters": [
          {
            "description": "Id of the Role Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Role Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Role Entity by id",
        "tags": [
          "Role"
        ]
      },
      "put": {
        "description": "This updates the Role entity",
        "operationId": "UpdateRole",
        "parameters": [
          {
            "description": "Id of the Role to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Role id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleEntity"
              }
            }
          },
          "description": "Role that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleEntity"
                }
              }
            },
            "description": "Update Role Entity details",
            "x-ms-summary": "Update Role details"
          },
          "404": {
            "description": "Role not found",
            "x-ms-summary": "Role not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Role"
        ]
      }
    },
    "/safeguardcategories": {
      "get": {
        "description": "This returns the paginated results for Safeguard Category Entity based on the OData Query Parameters.",
        "operationId": "QuerySafeguardCategory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SafeguardCategoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Safeguard Category Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Safeguard Category Entity",
        "tags": [
          "SafeguardCategory"
        ]
      },
      "post": {
        "description": "This creates a new SafeguardCategory",
        "operationId": "CreateSafeguardCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SafeguardCategoryEntity"
              }
            }
          },
          "description": "Creates a new SafeguardCategory",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafeguardCategoryEntity"
                }
              }
            },
            "description": "New SafeguardCategory details added",
            "x-ms-summary": "New SafeguardCategory details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "SafeguardCategory not found",
            "x-ms-summary": "SafeguardCategory not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new SafeguardCategory",
        "tags": [
          "SafeguardCategory"
        ]
      }
    },
    "/safeguardcategories/search/{languageCode}": {
      "get": {
        "description": "This searches the Safeguard Category Entity",
        "operationId": "SearchSafeguardCategory",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SafeguardCategoryEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Safeguard Category Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Safeguard Category Entity",
        "tags": [
          "SafeguardCategory"
        ]
      }
    },
    "/safeguardcategories/{id}": {
      "delete": {
        "description": "This deletes a(n) SafeguardCategory by it's GUID.",
        "operationId": "DeleteSafeguardCategory",
        "parameters": [
          {
            "description": "SafeguardCategory id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "SafeguardCategory id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "SafeguardCategory Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "SafeguardCategory"
        ]
      },
      "get": {
        "description": "Finds the Safeguard Category Entity by it's GUID",
        "operationId": "FindSafeguardCategoryById",
        "parameters": [
          {
            "description": "Id of the Safeguard Category Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Safeguard Category Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafeguardCategoryEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Safeguard Category Entity by id",
        "tags": [
          "SafeguardCategory"
        ]
      },
      "put": {
        "description": "This updates the SafeguardCategory entity",
        "operationId": "UpdateSafeguardCategory",
        "parameters": [
          {
            "description": "Id of the SafeguardCategory to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "SafeguardCategory id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SafeguardCategoryEntity"
              }
            }
          },
          "description": "SafeguardCategory that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SafeguardCategoryEntity"
                }
              }
            },
            "description": "Update Safeguard Category Entity details",
            "x-ms-summary": "Update SafeguardCategory details"
          },
          "404": {
            "description": "SafeguardCategory not found",
            "x-ms-summary": "SafeguardCategory not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "SafeguardCategory"
        ]
      }
    },
    "/synchronizationmetadatas": {
      "get": {
        "description": "This returns the paginated results for Synchronization Meta Data Entity based on the OData Query Parameters.",
        "operationId": "QuerySynchronizationMetaData",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Synchronization Meta Data Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Synchronization Meta Data Entity",
        "tags": [
          "SynchronizationMetaData"
        ]
      },
      "post": {
        "description": "This creates a new SynchronizationMetaData",
        "operationId": "CreateSynchronizationMetaData",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
              }
            }
          },
          "description": "Creates a new SynchronizationMetaData",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
                }
              }
            },
            "description": "New SynchronizationMetaData details added",
            "x-ms-summary": "New SynchronizationMetaData details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "SynchronizationMetaData not found",
            "x-ms-summary": "SynchronizationMetaData not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new SynchronizationMetaData",
        "tags": [
          "SynchronizationMetaData"
        ]
      }
    },
    "/synchronizationmetadatas/search/{languageCode}": {
      "get": {
        "description": "This searches the Synchronization Meta Data Entity",
        "operationId": "SearchSynchronizationMetaData",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Synchronization Meta Data Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Synchronization Meta Data Entity",
        "tags": [
          "SynchronizationMetaData"
        ]
      }
    },
    "/synchronizationmetadatas/{id}": {
      "delete": {
        "description": "This deletes a(n) SynchronizationMetaData by it's GUID.",
        "operationId": "DeleteSynchronizationMetaData",
        "parameters": [
          {
            "description": "SynchronizationMetaData id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "SynchronizationMetaData id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "SynchronizationMetaData Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "SynchronizationMetaData"
        ]
      },
      "get": {
        "description": "Finds the Synchronization Meta Data Entity by it's GUID",
        "operationId": "FindSynchronizationMetaDataById",
        "parameters": [
          {
            "description": "Id of the Synchronization Meta Data Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Synchronization Meta Data Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Synchronization Meta Data Entity by id",
        "tags": [
          "SynchronizationMetaData"
        ]
      },
      "put": {
        "description": "This updates the SynchronizationMetaData entity",
        "operationId": "UpdateSynchronizationMetaData",
        "parameters": [
          {
            "description": "Id of the SynchronizationMetaData to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "SynchronizationMetaData id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
              }
            }
          },
          "description": "SynchronizationMetaData that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SynchronizationMetaDataEntity"
                }
              }
            },
            "description": "Update Synchronization Meta Data Entity details",
            "x-ms-summary": "Update SynchronizationMetaData details"
          },
          "404": {
            "description": "SynchronizationMetaData not found",
            "x-ms-summary": "SynchronizationMetaData not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "SynchronizationMetaData"
        ]
      }
    },
    "/tags": {
      "get": {
        "description": "This returns the paginated results for Tag Entity based on the OData Query Parameters.",
        "operationId": "QueryTag",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TagEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Tag Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Tag Entity",
        "tags": [
          "Tag"
        ]
      },
      "post": {
        "description": "This creates a new Tag",
        "operationId": "CreateTag",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagEntity"
              }
            }
          },
          "description": "Creates a new Tag",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            },
            "description": "New Tag details added",
            "x-ms-summary": "New Tag details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "Tag not found",
            "x-ms-summary": "Tag not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new Tag",
        "tags": [
          "Tag"
        ]
      }
    },
    "/tags/search/{languageCode}": {
      "get": {
        "description": "This searches the Tag Entity",
        "operationId": "SearchTag",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TagEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Tag Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Tag Entity",
        "tags": [
          "Tag"
        ]
      }
    },
    "/tags/{id}": {
      "delete": {
        "description": "This deletes a(n) Tag by it's GUID.",
        "operationId": "DeleteTag",
        "parameters": [
          {
            "description": "Tag id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Tag id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "Tag Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "Tag"
        ]
      },
      "get": {
        "description": "Finds the Tag Entity by it's GUID",
        "operationId": "FindTagById",
        "parameters": [
          {
            "description": "Id of the Tag Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Tag Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Tag Entity by id",
        "tags": [
          "Tag"
        ]
      },
      "put": {
        "description": "This updates the Tag entity",
        "operationId": "UpdateTag",
        "parameters": [
          {
            "description": "Id of the Tag to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Tag id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TagEntity"
              }
            }
          },
          "description": "Tag that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagEntity"
                }
              }
            },
            "description": "Update Tag Entity details",
            "x-ms-summary": "Update Tag details"
          },
          "404": {
            "description": "Tag not found",
            "x-ms-summary": "Tag not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "Tag"
        ]
      }
    },
    "/tags/{id}/subtags": {
      "get": {
        "description": "Finds Sub Tags for a Tag using the Tag Id",
        "operationId": "FindSubTagsByTagId",
        "parameters": [
          {
            "description": "ID of the Tag",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Tag ID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "format": "uuid",
                    "type": "string"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Sub Tag details",
            "x-ms-summary": "Sub Tag details"
          },
          "404": {
            "description": "Invalid data",
            "x-ms-summary": "Invalid data"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Finds Sub Tags for a Tag using the Tag Id",
        "tags": [
          "Tag"
        ]
      }
    },
    "/unitofmeasurements": {
      "get": {
        "description": "This returns the paginated results for Unit Of Measurement Entity based on the OData Query Parameters.",
        "operationId": "QueryUnitOfMeasurement",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UnitOfMeasurementEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Unit Of Measurement Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for Unit Of Measurement Entity",
        "tags": [
          "UnitOfMeasurement"
        ]
      },
      "post": {
        "description": "This creates a new UnitOfMeasurement",
        "operationId": "CreateUnitOfMeasurement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasurementEntity"
              }
            }
          },
          "description": "Creates a new UnitOfMeasurement",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasurementEntity"
                }
              }
            },
            "description": "New UnitOfMeasurement details added",
            "x-ms-summary": "New UnitOfMeasurement details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "UnitOfMeasurement not found",
            "x-ms-summary": "UnitOfMeasurement not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new UnitOfMeasurement",
        "tags": [
          "UnitOfMeasurement"
        ]
      }
    },
    "/unitofmeasurements/search/{languageCode}": {
      "get": {
        "description": "This searches the Unit Of Measurement Entity",
        "operationId": "SearchUnitOfMeasurement",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UnitOfMeasurementEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the Unit Of Measurement Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for Unit Of Measurement Entity",
        "tags": [
          "UnitOfMeasurement"
        ]
      }
    },
    "/unitofmeasurements/{id}": {
      "delete": {
        "description": "This deletes a(n) UnitOfMeasurement by it's GUID.",
        "operationId": "DeleteUnitOfMeasurement",
        "parameters": [
          {
            "description": "UnitOfMeasurement id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "UnitOfMeasurement id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "UnitOfMeasurement Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "UnitOfMeasurement"
        ]
      },
      "get": {
        "description": "Finds the Unit Of Measurement Entity by it's GUID",
        "operationId": "FindUnitOfMeasurementById",
        "parameters": [
          {
            "description": "Id of the Unit Of Measurement Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "Unit Of Measurement Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasurementEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find Unit Of Measurement Entity by id",
        "tags": [
          "UnitOfMeasurement"
        ]
      },
      "put": {
        "description": "This updates the UnitOfMeasurement entity",
        "operationId": "UpdateUnitOfMeasurement",
        "parameters": [
          {
            "description": "Id of the UnitOfMeasurement to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "UnitOfMeasurement id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnitOfMeasurementEntity"
              }
            }
          },
          "description": "UnitOfMeasurement that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnitOfMeasurementEntity"
                }
              }
            },
            "description": "Update Unit Of Measurement Entity details",
            "x-ms-summary": "Update UnitOfMeasurement details"
          },
          "404": {
            "description": "UnitOfMeasurement not found",
            "x-ms-summary": "UnitOfMeasurement not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "UnitOfMeasurement"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "This returns the paginated results for User Entity based on the OData Query Parameters.",
        "operationId": "QueryUser",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the User Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "Invalid data provided",
            "x-ms-summary": "Invalid"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Query Paginated results for User Entity",
        "tags": [
          "User"
        ]
      },
      "post": {
        "description": "This creates a new User",
        "operationId": "CreateUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEntity"
              }
            }
          },
          "description": "Creates a new User",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            },
            "description": "New User details added",
            "x-ms-summary": "New User details added"
          },
          "400": {
            "description": "Invalid Data",
            "x-ms-summary": "Invalid Data"
          },
          "404": {
            "description": "User not found",
            "x-ms-summary": "User not found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Creates a new User",
        "tags": [
          "User"
        ]
      }
    },
    "/users/search/{languageCode}": {
      "get": {
        "description": "This searches the User Entity",
        "operationId": "SearchUser",
        "parameters": [
          {
            "description": "Top",
            "in": "query",
            "name": "$top",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "top"
          },
          {
            "description": "Skip",
            "in": "query",
            "name": "$skip",
            "schema": {
              "format": "int32",
              "type": "integer"
            },
            "x-ms-summary": "skip"
          },
          {
            "description": "Order By",
            "in": "query",
            "name": "$orderby",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "orderby"
          },
          {
            "description": "Query Text",
            "in": "query",
            "name": "q",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "q"
          },
          {
            "description": "list of comma separated label ids",
            "in": "query",
            "name": "l",
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "l"
          },
          {
            "description": "The language the search text is in",
            "in": "path",
            "name": "languageCode",
            "required": true,
            "schema": {
              "type": "string"
            },
            "x-ms-summary": "The language code"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserEntity"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Return the User Entity details based on query",
            "x-ms-summary": "Valid"
          },
          "404": {
            "description": "No entities found",
            "x-ms-summary": "No entities found"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Search for User Entity",
        "tags": [
          "User"
        ]
      }
    },
    "/users/{id}": {
      "delete": {
        "description": "This deletes a(n) User by it's GUID.",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "description": "User id to delete",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "User id to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "x-ms-summary": "User Deleted successfully"
          },
          "404": {
            "description": "Invalid ID supplied",
            "x-ms-summary": "Invalid ID supplied"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Deletes the Entity",
        "tags": [
          "User"
        ]
      },
      "get": {
        "description": "Finds the User Entity by it's GUID",
        "operationId": "FindUserById",
        "parameters": [
          {
            "description": "Id of the User Entity to retrieve",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "User Entity id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            },
            "description": "successful operation",
            "x-ms-summary": "successful operation"
          },
          "404": {
            "description": "Invalid status value",
            "x-ms-summary": "Invalid status value"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Find User Entity by id",
        "tags": [
          "User"
        ]
      },
      "put": {
        "description": "This updates the User entity",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "description": "Id of the User to be updated",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "x-ms-summary": "User id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserEntity"
              }
            }
          },
          "description": "User that needs to be updated",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            },
            "description": "Update User Entity details",
            "x-ms-summary": "Update User details"
          },
          "404": {
            "description": "User not found",
            "x-ms-summary": "User not found"
          },
          "405": {
            "description": "Validation exception",
            "x-ms-summary": "Validation exception"
          }
        },
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "summary": "Update Entity",
        "tags": [
          "User"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "AreaDeviceNodeEntity": {
        "description": "example of AreaDeviceNodeEntity",
        "properties": {
          "AreaId": {
            "description": "areaid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaId",
            "type": "string"
          },
          "Configuration": {
            "description": "Represents the type of the entity",
            "nullable": true,
            "title": "Configuration",
            "type": "object"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DeviceId": {
            "description": "deviceid",
            "format": "uuid",
            "nullable": true,
            "title": "DeviceId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "GroupId": {
            "description": "groupid",
            "format": "uuid",
            "nullable": true,
            "title": "GroupId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModelId": {
            "description": "modelid",
            "format": "uuid",
            "nullable": true,
            "title": "ModelId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "PhysicalTagHierarchy": {
            "description": "physicaltaghierarchy",
            "nullable": true,
            "title": "PhysicalTagHierarchy",
            "type": "object"
          },
          "SafetyDeviceHierarchy": {
            "description": "safetydevicehierarchy",
            "items": {
              "type": "object"
            },
            "title": "SafetyDeviceHierarchy",
            "type": "object"
          },
          "SafetyPartDeviceNodesHierarchy": {
            "description": "safetypartdevicenodeshierarchy",
            "items": {
              "type": "object"
            },
            "title": "SafetyPartDeviceNodesHierarchy",
            "type": "object"
          },
          "TagId": {
            "description": "tagid",
            "format": "uuid",
            "nullable": true,
            "title": "TagId",
            "type": "string"
          }
        },
        "title": "AreaDeviceNodeEntity",
        "type": "object"
      },
      "AreaDeviceNodeGroupingEntity": {
        "description": "example of AreaDeviceNodeGroupingEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Configuration": {
            "description": "Represents the type of the entity",
            "nullable": true,
            "title": "Configuration",
            "type": "object"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "SafetyDeviceHierarchies": {
            "description": "safetydevicehierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyDeviceHierarchies",
            "type": "array"
          },
          "SafetyPartDeviceNodesHierarchies": {
            "description": "safetypartdevicenodeshierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyPartDeviceNodesHierarchies",
            "type": "array"
          },
          "Type": {
            "default": 1,
            "description": "Type of this Entity",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "AreaDeviceNodeGroupingEntity",
        "type": "object"
      },
      "AreaEntity": {
        "description": "example of AreaEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Index": {
            "description": "The relative order to display for all Parents Children",
            "format": "int32",
            "nullable": true,
            "title": "Index",
            "type": "integer"
          },
          "Intention": {
            "description": "intention",
            "nullable": true,
            "title": "Intention",
            "type": "string"
          },
          "LocationId": {
            "description": "locationid",
            "format": "uuid",
            "nullable": true,
            "title": "LocationId",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "NodeTypeId": {
            "description": "nodetypeid",
            "format": "uuid",
            "nullable": true,
            "title": "NodeTypeId",
            "type": "string"
          },
          "PhysicalTagHierarchies": {
            "description": "physicaltaghierarchies",
            "items": {
              "type": "object"
            },
            "title": "PhysicalTagHierarchies",
            "type": "array"
          },
          "ProcessId": {
            "description": "processid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcessId",
            "type": "string"
          },
          "SafeguardSafetyInstrumentedFunctionPartNodesHierarchies": {
            "description": "safeguardsafetyinstrumentedfunctionpartnodeshierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafeguardSafetyInstrumentedFunctionPartNodesHierarchies",
            "type": "array"
          },
          "SafetyModifierNodeHierarchies": {
            "description": "safetymodifiernodehierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyModifierNodeHierarchies",
            "type": "array"
          },
          "Status": {
            "default": 0,
            "description": "status",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "format": "int32",
            "nullable": true,
            "title": "Status",
            "type": "integer"
          },
          "Type": {
            "default": 1,
            "description": "Type of this Entity",
            "enum": [
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "AreaEntity",
        "type": "object"
      },
      "AreaHistoryEntity": {
        "description": "example of AreaHistoryEntity",
        "properties": {
          "AreaId": {
            "description": "areaid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaId",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DateEnd": {
            "description": "dateend",
            "format": "date-time",
            "nullable": true,
            "title": "DateEnd",
            "type": "string"
          },
          "DateStart": {
            "description": "datestart",
            "format": "date-time",
            "nullable": true,
            "title": "DateStart",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "EventMetadataId": {
            "description": "eventmetadataid",
            "format": "uuid",
            "nullable": true,
            "title": "EventMetadataId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Status": {
            "default": 0,
            "description": "status",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "format": "int32",
            "nullable": true,
            "title": "Status",
            "type": "integer"
          }
        },
        "title": "AreaHistoryEntity",
        "type": "object"
      },
      "AreaOrDeviceEntity": {
        "description": "example of AreaOrDeviceEntity",
        "properties": {
          "AreaDeviceNodeId": {
            "description": "areadevicenodeid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaDeviceNodeId",
            "type": "string"
          },
          "AreaId": {
            "description": "areaid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaId",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          }
        },
        "title": "AreaOrDeviceEntity",
        "type": "object"
      },
      "AssumptionEntity": {
        "description": "example of AssumptionEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Sources": {
            "description": "sources",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Sources",
            "type": "array"
          }
        },
        "title": "AssumptionEntity",
        "type": "object"
      },
      "AuditEntity": {
        "description": "example of AuditEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityId": {
            "description": "entityid",
            "format": "uuid",
            "nullable": true,
            "title": "EntityId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "EntityType": {
            "description": "entitytype",
            "nullable": true,
            "title": "EntityType",
            "type": "string"
          },
          "EntityVersionTag": {
            "description": "entityversiontag",
            "nullable": true,
            "title": "EntityVersionTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Type": {
            "default": 0,
            "description": "Type of this Entity",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          },
          "UserId": {
            "description": "userid",
            "format": "uuid",
            "nullable": true,
            "title": "UserId",
            "type": "string"
          },
          "UserPrincipalName": {
            "description": "userprincipalname",
            "nullable": true,
            "title": "UserPrincipalName",
            "type": "string"
          }
        },
        "title": "AuditEntity",
        "type": "object"
      },
      "BlobResourceEntity": {
        "description": "example of BlobResourceEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "AutomaticRevision": {
            "description": "automaticrevision",
            "nullable": true,
            "title": "AutomaticRevision",
            "type": "boolean"
          },
          "BlobRevision": {
            "description": "blobrevision",
            "nullable": true,
            "title": "BlobRevision",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Extension": {
            "description": "The file extension",
            "nullable": true,
            "title": "Extension",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Identifier": {
            "description": "The blob identifier",
            "nullable": true,
            "title": "Identifier",
            "type": "string"
          },
          "IsInternallyManaged": {
            "description": "isinternallymanaged",
            "nullable": true,
            "title": "IsInternallyManaged",
            "type": "boolean"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "MIMECategory": {
            "default": 0,
            "description": "mimecategory",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            "format": "int32",
            "nullable": true,
            "title": "MIMECategory",
            "type": "integer"
          },
          "MIMEType": {
            "description": "mimetype",
            "nullable": true,
            "title": "MIMEType",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Revision": {
            "description": "The user defined Revision",
            "nullable": true,
            "title": "Revision",
            "type": "string"
          },
          "RevisionDate": {
            "description": "revisiondate",
            "format": "date",
            "nullable": true,
            "title": "RevisionDate",
            "type": "string"
          },
          "Uri": {
            "description": "The URI of the Entity",
            "format": "uri",
            "nullable": true,
            "title": "Uri",
            "type": "string"
          }
        },
        "title": "BlobResourceEntity",
        "type": "object"
      },
      "CauseEntity": {
        "description": "example of CauseEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Category": {
            "description": "The category of the issue",
            "nullable": true,
            "title": "Category",
            "type": "object"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FrequencyAnalyzed": {
            "description": "frequencyanalyzed",
            "format": "double",
            "nullable": true,
            "title": "FrequencyAnalyzed",
            "type": "number"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "CauseEntity",
        "type": "object"
      },
      "CitationEntity": {
        "description": "example of CitationEntity",
        "properties": {
          "Authors": {
            "description": "The Author(s)",
            "nullable": true,
            "title": "Authors",
            "type": "string"
          },
          "City": {
            "description": "The City that the Citation was published in",
            "nullable": true,
            "title": "City",
            "type": "string"
          },
          "CollectionName": {
            "description": "collectionname",
            "nullable": true,
            "title": "CollectionName",
            "type": "string"
          },
          "CountryRegion": {
            "description": "countryregion",
            "nullable": true,
            "title": "CountryRegion",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DOI": {
            "description": "Provides a technical/social infrastructure for the registration and use of persistent interoperable identifiers",
            "nullable": true,
            "title": "DOI",
            "type": "string"
          },
          "DateAccessed": {
            "description": "dateaccessed",
            "format": "date-time",
            "nullable": true,
            "title": "DateAccessed",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Issue": {
            "description": "The Issue that contains the Citation",
            "nullable": true,
            "title": "Issue",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Pages": {
            "description": "The pages that make up the Citation",
            "nullable": true,
            "title": "Pages",
            "type": "string"
          },
          "Published": {
            "description": "The Date Published",
            "format": "date-time",
            "nullable": true,
            "title": "Published",
            "type": "string"
          },
          "PublishedYearOnly": {
            "description": "publishedyearonly",
            "nullable": true,
            "title": "PublishedYearOnly",
            "type": "boolean"
          },
          "Publisher": {
            "description": "The Publisher",
            "nullable": true,
            "title": "Publisher",
            "type": "string"
          },
          "SourceDatabase": {
            "description": "sourcedatabase",
            "format": "uuid",
            "nullable": true,
            "title": "SourceDatabase",
            "type": "string"
          },
          "SourceDetails": {
            "description": "sourcedetails",
            "nullable": true,
            "title": "SourceDetails",
            "type": "object"
          },
          "Title": {
            "description": "The title of the User",
            "nullable": true,
            "title": "Title",
            "type": "string"
          },
          "Type": {
            "default": 0,
            "description": "Type of this Entity",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          },
          "Url": {
            "description": "The URL to the Citation",
            "nullable": true,
            "title": "Url",
            "type": "string"
          },
          "Volume": {
            "description": "The Volume that contains the Citation",
            "nullable": true,
            "title": "Volume",
            "type": "string"
          }
        },
        "title": "CitationEntity",
        "type": "object"
      },
      "ConsequenceEntity": {
        "description": "example of ConsequenceEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "ConsequenceEntity",
        "type": "object"
      },
      "CurrencyEntity": {
        "description": "example of CurrencyEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "ISO4217": {
            "description": "iso4217",
            "nullable": true,
            "title": "ISO4217",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          }
        },
        "title": "CurrencyEntity",
        "type": "object"
      },
      "DataCollectionConfigurationEntity": {
        "description": "example of DataCollectionConfigurationEntity",
        "properties": {
          "ApplicableAreaTypeNodes": {
            "default": 1,
            "description": "applicableareatypenodes",
            "enum": [
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512
            ],
            "format": "int32",
            "nullable": true,
            "title": "ApplicableAreaTypeNodes",
            "type": "integer"
          },
          "ApplicableEventTypes": {
            "default": 1,
            "description": "applicableeventtypes",
            "enum": [
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512
            ],
            "format": "int32",
            "nullable": true,
            "title": "ApplicableEventTypes",
            "type": "integer"
          },
          "ApplicableModifierTypes": {
            "default": 1,
            "description": "applicablemodifiertypes",
            "enum": [
              1,
              2,
              4,
              8,
              16
            ],
            "format": "int32",
            "nullable": true,
            "title": "ApplicableModifierTypes",
            "type": "integer"
          },
          "ApplicableTypes": {
            "description": "List of Types (as strings) that indicate which Entities this configuration applies to",
            "nullable": true,
            "title": "ApplicableTypes",
            "type": "object"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Inputs": {
            "description": "An array of IDataCollectionInput that define the inputs",
            "nullable": true,
            "title": "Inputs",
            "type": "object"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "DataCollectionConfigurationEntity",
        "type": "object"
      },
      "DemandEntity": {
        "description": "example of DemandEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DemandClassificationId": {
            "description": "demandclassificationid",
            "format": "uuid",
            "nullable": true,
            "title": "DemandClassificationId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "EventMetadataId": {
            "description": "eventmetadataid",
            "format": "uuid",
            "nullable": true,
            "title": "EventMetadataId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Outcome": {
            "default": 0,
            "description": "The outcome of this demand based on the Safeguards",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "Outcome",
            "type": "integer"
          }
        },
        "title": "DemandEntity",
        "type": "object"
      },
      "DemandLineItemNodeEntity": {
        "description": "example of DemandLineItemNodeEntity",
        "properties": {
          "Application": {
            "description": "application",
            "nullable": true,
            "title": "Application",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "HazardId": {
            "description": "hazardid",
            "format": "uuid",
            "nullable": true,
            "title": "HazardId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "InitiatingEventId": {
            "description": "initiatingeventid",
            "format": "uuid",
            "nullable": true,
            "title": "InitiatingEventId",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ModifierId": {
            "description": "modifierid",
            "format": "uuid",
            "nullable": true,
            "title": "ModifierId",
            "type": "string"
          },
          "Order": {
            "description": "The Order of the line item",
            "format": "int32",
            "nullable": true,
            "title": "Order",
            "type": "integer"
          },
          "Outcome": {
            "default": 0,
            "description": "The outcome of this demand based on the Safeguards",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "Outcome",
            "type": "integer"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          }
        },
        "title": "DemandLineItemNodeEntity",
        "type": "object"
      },
      "DeviationEntity": {
        "description": "example of DeviationEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "DeviationEntity",
        "type": "object"
      },
      "DeviceEntity": {
        "description": "example of DeviceEntity",
        "properties": {
          "ActualRiskReduction": {
            "description": "actualriskreduction",
            "format": "double",
            "nullable": true,
            "title": "ActualRiskReduction",
            "type": "number"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModelId": {
            "description": "modelid",
            "format": "uuid",
            "nullable": true,
            "title": "ModelId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "PercentUtilization": {
            "description": "percentutilization",
            "format": "double",
            "nullable": true,
            "title": "PercentUtilization",
            "type": "number"
          },
          "ProvenInUseId": {
            "description": "proveninuseid",
            "format": "uuid",
            "nullable": true,
            "title": "ProvenInUseId",
            "type": "string"
          },
          "SerialNumber": {
            "description": "serialnumber",
            "nullable": true,
            "title": "SerialNumber",
            "type": "string"
          },
          "Status": {
            "default": 0,
            "description": "status",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "format": "int32",
            "nullable": true,
            "title": "Status",
            "type": "integer"
          },
          "Type": {
            "default": 0,
            "description": "Type of this Entity",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "DeviceEntity",
        "type": "object"
      },
      "DeviceHistoryEntity": {
        "description": "example of DeviceHistoryEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DateEnd": {
            "description": "dateend",
            "format": "date-time",
            "nullable": true,
            "title": "DateEnd",
            "type": "string"
          },
          "DateStart": {
            "description": "datestart",
            "format": "date-time",
            "nullable": true,
            "title": "DateStart",
            "type": "string"
          },
          "DeviceId": {
            "description": "deviceid",
            "format": "uuid",
            "nullable": true,
            "title": "DeviceId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "EventMetadataId": {
            "description": "eventmetadataid",
            "format": "uuid",
            "nullable": true,
            "title": "EventMetadataId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Status": {
            "default": 0,
            "description": "status",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11
            ],
            "format": "int32",
            "nullable": true,
            "title": "Status",
            "type": "integer"
          }
        },
        "title": "DeviceHistoryEntity",
        "type": "object"
      },
      "DeviceModelEntity": {
        "description": "example of DeviceModelEntity",
        "properties": {
          "AdditionalData": {
            "description": "additionaldata",
            "nullable": true,
            "title": "AdditionalData",
            "type": "object"
          },
          "Architecture": {
            "default": 0,
            "description": "The type of the architecture",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "Architecture",
            "type": "integer"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CertifiedSIL": {
            "description": "certifiedsil",
            "nullable": true,
            "title": "CertifiedSIL",
            "type": "object"
          },
          "Channels": {
            "description": "Represents a serialized version of the DeviceChannelConfiguration",
            "nullable": true,
            "title": "Channels",
            "type": "object"
          },
          "CitationId": {
            "description": "citationid",
            "format": "uuid",
            "nullable": true,
            "title": "CitationId",
            "type": "string"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "Cost": {
            "$ref": "#/components/schemas/LocalizedCurrency"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "DeviceTypeId": {
            "description": "devicetypeid",
            "format": "uuid",
            "nullable": true,
            "title": "DeviceTypeId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FailureRateEntries": {
            "description": "failurerateentries",
            "items": {
              "type": "object"
            },
            "title": "FailureRateEntries",
            "type": "array"
          },
          "HardwareFaultTolerance": {
            "description": "hardwarefaulttolerance",
            "format": "int32",
            "nullable": true,
            "title": "HardwareFaultTolerance",
            "type": "integer"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ManufacturerId": {
            "description": "manufacturerid",
            "format": "uuid",
            "nullable": true,
            "title": "ManufacturerId",
            "type": "string"
          },
          "MaximumDiagnosticsInterval": {
            "description": "maximumdiagnosticsinterval",
            "nullable": true,
            "title": "MaximumDiagnosticsInterval",
            "type": "string"
          },
          "MeasurementType": {
            "default": 0,
            "description": "measurementtype",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7
            ],
            "format": "int32",
            "nullable": true,
            "title": "MeasurementType",
            "type": "integer"
          },
          "Model": {
            "description": "The model for the entity",
            "nullable": true,
            "title": "Model",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ProcessInterfaceType": {
            "default": 0,
            "description": "processinterfacetype",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "ProcessInterfaceType",
            "type": "integer"
          },
          "Resource": {
            "default": 0,
            "description": "The type of resource",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "Resource",
            "type": "integer"
          },
          "ResourceType": {
            "default": 0,
            "description": "resourcetype",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27
            ],
            "format": "int32",
            "nullable": true,
            "title": "ResourceType",
            "type": "integer"
          },
          "ResponseTime": {
            "description": "responsetime",
            "nullable": true,
            "title": "ResponseTime",
            "type": "string"
          },
          "RestrictTripDirection": {
            "default": 1,
            "description": "restricttripdirection",
            "enum": [
              1,
              2
            ],
            "format": "int32",
            "nullable": true,
            "title": "RestrictTripDirection",
            "type": "integer"
          },
          "SystemResourceKey": {
            "description": "systemresourcekey",
            "nullable": true,
            "title": "SystemResourceKey",
            "type": "string"
          },
          "UsefulCycles": {
            "description": "usefulcycles",
            "format": "int32",
            "nullable": true,
            "title": "UsefulCycles",
            "type": "integer"
          },
          "UsefulLife": {
            "description": "usefullife",
            "nullable": true,
            "title": "UsefulLife",
            "type": "string"
          }
        },
        "title": "DeviceModelEntity",
        "type": "object"
      },
      "DeviceTypeEntity": {
        "description": "example of DeviceTypeEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModelType": {
            "default": 0,
            "description": "modeltype",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27
            ],
            "format": "int32",
            "nullable": true,
            "title": "ModelType",
            "type": "integer"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "SystemResourceKey": {
            "description": "systemresourcekey",
            "nullable": true,
            "title": "SystemResourceKey",
            "type": "string"
          }
        },
        "title": "DeviceTypeEntity",
        "type": "object"
      },
      "EventMetadataEntity": {
        "description": "example of EventMetadataEntity",
        "properties": {
          "ApprovedById": {
            "description": "approvedbyid",
            "format": "uuid",
            "nullable": true,
            "title": "ApprovedById",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CheckedIds": {
            "description": "checkedids",
            "nullable": true,
            "title": "CheckedIds",
            "type": "object"
          },
          "CompletedById": {
            "description": "completedbyid",
            "format": "uuid",
            "nullable": true,
            "title": "CompletedById",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "items": {
              "type": "object"
            },
            "nullable": true,
            "title": "DataCollection",
            "type": "array"
          },
          "DateApproved": {
            "description": "dateapproved",
            "format": "date-time",
            "nullable": true,
            "title": "DateApproved",
            "type": "string"
          },
          "DateCompleted": {
            "description": "datecompleted",
            "format": "date-time",
            "nullable": true,
            "title": "DateCompleted",
            "type": "string"
          },
          "DateEnd": {
            "description": "dateend",
            "format": "date-time",
            "nullable": true,
            "title": "DateEnd",
            "type": "string"
          },
          "DateStart": {
            "description": "datestart",
            "format": "date-time",
            "nullable": true,
            "title": "DateStart",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Options": {
            "description": "options",
            "nullable": true,
            "title": "Options",
            "type": "object"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "ProcedureInstanceEntityId": {
            "description": "procedureinstanceentityid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcedureInstanceEntityId",
            "type": "string"
          },
          "SecondaryCheckedIds": {
            "description": "secondarycheckedids",
            "nullable": true,
            "title": "SecondaryCheckedIds",
            "type": "object"
          },
          "UriSegment": {
            "description": "urisegment",
            "nullable": true,
            "title": "UriSegment",
            "type": "string"
          },
          "WorkflowState": {
            "default": 0,
            "description": "workflowstate",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9
            ],
            "format": "int32",
            "nullable": true,
            "title": "WorkflowState",
            "type": "integer"
          }
        },
        "title": "EventMetadataEntity",
        "type": "object"
      },
      "FailureClassificationEntity": {
        "description": "example of FailureClassificationEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "DeviceTypeId": {
            "description": "devicetypeid",
            "format": "uuid",
            "nullable": true,
            "title": "DeviceTypeId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FailureMode": {
            "default": 0,
            "description": "The type of failure mode",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            "format": "int32",
            "nullable": true,
            "title": "FailureMode",
            "type": "integer"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "FailureClassificationEntity",
        "type": "object"
      },
      "FailureEntity": {
        "description": "example of FailureEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DateOccurred": {
            "description": "dateoccurred",
            "format": "date-time",
            "nullable": true,
            "title": "DateOccurred",
            "type": "string"
          },
          "DemandId": {
            "description": "demandid",
            "format": "uuid",
            "nullable": true,
            "title": "DemandId",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "EventMetadataId": {
            "description": "eventmetadataid",
            "format": "uuid",
            "nullable": true,
            "title": "EventMetadataId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "Source": {
            "default": 0,
            "description": "The type of the failure",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "Source",
            "type": "integer"
          }
        },
        "title": "FailureEntity",
        "type": "object"
      },
      "FailureLineItemNodeEntity": {
        "description": "example of FailureLineItemNodeEntity",
        "properties": {
          "ApplicationCodes": {
            "description": "applicationcodes",
            "items": {
              "type": "string"
            },
            "title": "ApplicationCodes",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DemandLineItemId": {
            "description": "demandlineitemid",
            "format": "uuid",
            "nullable": true,
            "title": "DemandLineItemId",
            "type": "string"
          },
          "DeviceId": {
            "description": "deviceid",
            "format": "uuid",
            "nullable": true,
            "title": "DeviceId",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FailureClassificationId": {
            "description": "failureclassificationid",
            "format": "uuid",
            "nullable": true,
            "title": "FailureClassificationId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "Mode": {
            "default": 0,
            "description": "The underlying system failure modes",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10
            ],
            "format": "int32",
            "nullable": true,
            "title": "Mode",
            "type": "integer"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "RepairEventId": {
            "description": "repaireventid",
            "format": "uuid",
            "nullable": true,
            "title": "RepairEventId",
            "type": "string"
          },
          "RepairTypeId": {
            "description": "repairtypeid",
            "format": "uuid",
            "nullable": true,
            "title": "RepairTypeId",
            "type": "string"
          }
        },
        "title": "FailureLineItemNodeEntity",
        "type": "object"
      },
      "HazardEntity": {
        "description": "example of HazardEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FrequencyAnalyzed": {
            "description": "frequencyanalyzed",
            "format": "double",
            "nullable": true,
            "title": "FrequencyAnalyzed",
            "type": "number"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "RiskReductionAnalyzed": {
            "description": "riskreductionanalyzed",
            "format": "double",
            "nullable": true,
            "title": "RiskReductionAnalyzed",
            "type": "number"
          },
          "SafetyNodesHierarchies": {
            "description": "safetynodeshierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyNodesHierarchies",
            "type": "array"
          }
        },
        "title": "HazardEntity",
        "type": "object"
      },
      "HazardInitiatingEventNodeEntity": {
        "description": "example of HazardInitiatingEventNodeEntity",
        "properties": {
          "AreaId": {
            "description": "areaid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaId",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "HasNoEffect": {
            "description": "hasnoeffect",
            "nullable": true,
            "title": "HasNoEffect",
            "type": "boolean"
          },
          "HazardId": {
            "description": "hazardid",
            "format": "uuid",
            "nullable": true,
            "title": "HazardId",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Index": {
            "description": "The relative order to display for all Parents Children",
            "format": "int32",
            "nullable": true,
            "title": "Index",
            "type": "integer"
          },
          "InitiatingEventId": {
            "description": "initiatingeventid",
            "format": "uuid",
            "nullable": true,
            "title": "InitiatingEventId",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ModifierId": {
            "description": "modifierid",
            "format": "uuid",
            "nullable": true,
            "title": "ModifierId",
            "type": "string"
          },
          "SeverityCategoryId": {
            "description": "severitycategoryid",
            "format": "uuid",
            "nullable": true,
            "title": "SeverityCategoryId",
            "type": "string"
          }
        },
        "title": "HazardInitiatingEventNodeEntity",
        "type": "object"
      },
      "IdentityOrUserEntity": {
        "description": "example of IdentityOrUserEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Identity": {
            "description": "identity",
            "nullable": true,
            "title": "Identity",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "UserId": {
            "description": "userid",
            "format": "uuid",
            "nullable": true,
            "title": "UserId",
            "type": "string"
          }
        },
        "title": "IdentityOrUserEntity",
        "type": "object"
      },
      "InitiatingEventEntity": {
        "description": "example of InitiatingEventEntity",
        "properties": {
          "AreaOrDeviceEntityId": {
            "description": "areaordeviceentityid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaOrDeviceEntityId",
            "type": "string"
          },
          "AssumedFrequency": {
            "description": "assumedfrequency",
            "format": "double",
            "nullable": true,
            "title": "AssumedFrequency",
            "type": "number"
          },
          "AssumptionId": {
            "description": "assumptionid",
            "format": "uuid",
            "nullable": true,
            "title": "AssumptionId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModelId": {
            "description": "modelid",
            "format": "uuid",
            "nullable": true,
            "title": "ModelId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "SafetyNodesHierarchies": {
            "description": "safetynodeshierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyNodesHierarchies",
            "type": "array"
          }
        },
        "title": "InitiatingEventEntity",
        "type": "object"
      },
      "InitiatingEventModelEntity": {
        "description": "example of InitiatingEventModelEntity",
        "properties": {
          "AssumedFrequency": {
            "description": "assumedfrequency",
            "format": "double",
            "nullable": true,
            "title": "AssumedFrequency",
            "type": "number"
          },
          "AssumptionId": {
            "description": "assumptionid",
            "format": "uuid",
            "nullable": true,
            "title": "AssumptionId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "InitiatingEventModelEntity",
        "type": "object"
      },
      "LabelEntity": {
        "description": "example of LabelEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Color": {
            "description": "This is the user defined colour in ARGB format.",
            "nullable": true,
            "title": "Color",
            "type": "object"
          },
          "ColorSecondary": {
            "description": "colorsecondary",
            "nullable": true,
            "title": "ColorSecondary",
            "type": "object"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FillPatternCSSClass": {
            "description": "fillpatterncssclass",
            "nullable": true,
            "title": "FillPatternCSSClass",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "LabelEntity",
        "type": "object"
      },
      "LocalizedCurrency": {
        "description": "example LocalizedCurrency",
        "properties": {
          "CurrencyISO4217": {
            "description": "currencyISO4217",
            "nullable": true,
            "title": "string",
            "type": "string"
          },
          "Value": {
            "description": "Values entered for for the entity",
            "format": "double",
            "nullable": true,
            "title": "number",
            "type": "number"
          }
        },
        "title": "LocalizedCurrency",
        "type": "object"
      },
      "LocalizedText": {
        "description": "example LocalizedText",
        "properties": {
          "LanguageISO639_2": {
            "description": "languageISO639_2",
            "nullable": true,
            "title": "string",
            "type": "string"
          },
          "Text": {
            "description": "text",
            "nullable": true,
            "title": "string",
            "type": "string"
          }
        },
        "title": "LocalizedText",
        "type": "object"
      },
      "LocationEntity": {
        "description": "example of LocationEntity",
        "properties": {
          "AddressLine1": {
            "description": "addressline1",
            "nullable": true,
            "title": "AddressLine1",
            "type": "string"
          },
          "AddressLine2": {
            "description": "addressline2",
            "nullable": true,
            "title": "AddressLine2",
            "type": "string"
          },
          "City": {
            "description": "The City that the Citation was published in",
            "nullable": true,
            "title": "City",
            "type": "string"
          },
          "Coordinate": {
            "description": "The coordinates of the location",
            "nullable": true,
            "title": "Coordinate",
            "type": "object"
          },
          "CountryISO3166_1": {
            "description": "countryiso3166_1",
            "nullable": true,
            "title": "CountryISO3166_1",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "PostalCode": {
            "description": "postalcode",
            "nullable": true,
            "title": "PostalCode",
            "type": "string"
          },
          "StateProvince": {
            "description": "stateprovince",
            "nullable": true,
            "title": "StateProvince",
            "type": "string"
          }
        },
        "title": "LocationEntity",
        "type": "object"
      },
      "ManufacturerEntity": {
        "description": "example of ManufacturerEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "LogoId": {
            "description": "logoid",
            "format": "uuid",
            "nullable": true,
            "title": "LogoId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "ManufacturerEntity",
        "type": "object"
      },
      "ModifierEntity": {
        "description": "example of ModifierEntity",
        "properties": {
          "AssumedDemandRate": {
            "description": "assumeddemandrate",
            "format": "double",
            "nullable": true,
            "title": "AssumedDemandRate",
            "type": "number"
          },
          "AssumedProbabilityOfFailureOnDemand": {
            "description": "assumedprobabilityoffailureondemand",
            "format": "double",
            "nullable": true,
            "title": "AssumedProbabilityOfFailureOnDemand",
            "type": "number"
          },
          "AssumedRiskReductionFactor": {
            "description": "assumedriskreductionfactor",
            "format": "double",
            "nullable": true,
            "title": "AssumedRiskReductionFactor",
            "type": "number"
          },
          "AssumptionId": {
            "description": "assumptionid",
            "format": "uuid",
            "nullable": true,
            "title": "AssumptionId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "Configuration": {
            "description": "Represents the type of the entity",
            "nullable": true,
            "title": "Configuration",
            "type": "object"
          },
          "ConsequenceImmediate": {
            "description": "consequenceimmediate",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "ConsequenceImmediate",
            "type": "array"
          },
          "ConsequencePotentialUltimate": {
            "description": "consequencepotentialultimate",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "ConsequencePotentialUltimate",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "nullable": true,
            "title": "DataCollection",
            "type": "object"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModelId": {
            "description": "modelid",
            "format": "uuid",
            "nullable": true,
            "title": "ModelId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ModifierType": {
            "default": 1,
            "description": "modifiertype",
            "enum": [
              1,
              2,
              4,
              8,
              16
            ],
            "format": "int32",
            "nullable": true,
            "title": "ModifierType",
            "type": "integer"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "SafeguardCategoryId": {
            "description": "safeguardcategoryid",
            "format": "uuid",
            "nullable": true,
            "title": "SafeguardCategoryId",
            "type": "string"
          },
          "SafeguardSafetyInstrumentedFunctionPartNodesHierarchies": {
            "description": "safeguardsafetyinstrumentedfunctionpartnodeshierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafeguardSafetyInstrumentedFunctionPartNodesHierarchies",
            "type": "array"
          },
          "SafetyModifierNodeHierarchies": {
            "description": "safetymodifiernodehierarchies",
            "items": {
              "type": "object"
            },
            "title": "SafetyModifierNodeHierarchies",
            "type": "array"
          },
          "Tag": {
            "description": "A string identifier associated with this",
            "nullable": true,
            "title": "Tag",
            "type": "string"
          }
        },
        "title": "ModifierEntity",
        "type": "object"
      },
      "ModifierModelEntity": {
        "description": "example of ModifierModelEntity",
        "properties": {
          "AssumedProbabilityOfFailureOnDemand": {
            "description": "assumedprobabilityoffailureondemand",
            "format": "double",
            "nullable": true,
            "title": "AssumedProbabilityOfFailureOnDemand",
            "type": "number"
          },
          "AssumedRiskReductionFactor": {
            "description": "assumedriskreductionfactor",
            "format": "double",
            "nullable": true,
            "title": "AssumedRiskReductionFactor",
            "type": "number"
          },
          "AssumptionId": {
            "description": "assumptionid",
            "format": "uuid",
            "nullable": true,
            "title": "AssumptionId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "nullable": true,
            "title": "DataCollection",
            "type": "object"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Type": {
            "default": 1,
            "description": "Type of this Entity",
            "enum": [
              1,
              2,
              4,
              8,
              16
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "ModifierModelEntity",
        "type": "object"
      },
      "NotificationEntity": {
        "description": "example of NotificationEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DateSent": {
            "description": "datesent",
            "format": "date",
            "nullable": true,
            "title": "DateSent",
            "type": "string"
          },
          "Dismissed": {
            "description": "Indicates if the **User** dismissed this notification",
            "nullable": true,
            "title": "Dismissed",
            "type": "boolean"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Icon": {
            "description": "The Icon CSS or Uri for the notification",
            "nullable": true,
            "title": "Icon",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Sent": {
            "description": "Indicates if the notification has been sent",
            "nullable": true,
            "title": "Sent",
            "type": "boolean"
          },
          "TextKey": {
            "description": "textkey",
            "nullable": true,
            "title": "TextKey",
            "type": "string"
          },
          "TitleKey": {
            "description": "titlekey",
            "nullable": true,
            "title": "TitleKey",
            "type": "string"
          },
          "UriAction": {
            "description": "uriaction",
            "nullable": true,
            "title": "UriAction",
            "type": "string"
          },
          "UriActionKey": {
            "description": "uriactionkey",
            "nullable": true,
            "title": "UriActionKey",
            "type": "string"
          },
          "UserId": {
            "description": "userid",
            "format": "uuid",
            "nullable": true,
            "title": "UserId",
            "type": "string"
          }
        },
        "title": "NotificationEntity",
        "type": "object"
      },
      "ProcedureEntity": {
        "description": "example of ProcedureEntity",
        "properties": {
          "ApplicableType": {
            "default": 0,
            "description": "applicabletype",
            "enum": [
              0,
              1,
              2,
              4,
              8,
              16,
              32
            ],
            "format": "int32",
            "nullable": true,
            "title": "ApplicableType",
            "type": "integer"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "DurationEstimated": {
            "description": "durationestimated",
            "nullable": true,
            "title": "DurationEstimated",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "IntervalDefault": {
            "description": "intervaldefault",
            "nullable": true,
            "title": "IntervalDefault",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Type": {
            "default": 0,
            "description": "Type of this Entity",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "ProcedureEntity",
        "type": "object"
      },
      "ProcedureInstanceEntity": {
        "description": "example of ProcedureInstanceEntity",
        "properties": {
          "AreaDeviceNodeGroupingId": {
            "description": "areadevicenodegroupingid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaDeviceNodeGroupingId",
            "type": "string"
          },
          "AreaDeviceNodeId": {
            "description": "areadevicenodeid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaDeviceNodeId",
            "type": "string"
          },
          "AreaId": {
            "description": "areaid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaId",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Interval": {
            "description": "interval",
            "nullable": true,
            "title": "Interval",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "ModifierId": {
            "description": "modifierid",
            "format": "uuid",
            "nullable": true,
            "title": "ModifierId",
            "type": "string"
          },
          "ProcedureId": {
            "description": "procedureid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcedureId",
            "type": "string"
          },
          "ProcedureInstanceOverviewStatsEntityId": {
            "description": "procedureinstanceoverviewstatsentityid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcedureInstanceOverviewStatsEntityId",
            "type": "string"
          }
        },
        "title": "ProcedureInstanceEntity",
        "type": "object"
      },
      "ProcedureStepEntity": {
        "description": "example of ProcedureStepEntity",
        "properties": {
          "ActionOnComplete": {
            "default": 0,
            "description": "actiononcomplete",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "ActionOnComplete",
            "type": "integer"
          },
          "ActionOnFailure": {
            "default": 0,
            "description": "actiononfailure",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "ActionOnFailure",
            "type": "integer"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "items": {
              "type": "object"
            },
            "nullable": true,
            "title": "DataCollection",
            "type": "array"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "DurationEstimated": {
            "description": "durationestimated",
            "nullable": true,
            "title": "DurationEstimated",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ParentId": {
            "description": "parentid",
            "format": "uuid",
            "nullable": true,
            "title": "ParentId",
            "type": "string"
          },
          "ProcedureId": {
            "description": "procedureid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcedureId",
            "type": "string"
          },
          "StepNumberRelative": {
            "description": "stepnumberrelative",
            "format": "int32",
            "nullable": true,
            "title": "StepNumberRelative",
            "type": "integer"
          },
          "Type": {
            "default": 0,
            "description": "Type of this Entity",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          }
        },
        "title": "ProcedureStepEntity",
        "type": "object"
      },
      "ProcessInformationEntity": {
        "description": "example of ProcessInformationEntity",
        "properties": {
          "AreaEntityId": {
            "description": "areaentityid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaEntityId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "Mode": {
            "default": 0,
            "description": "The underlying system failure modes",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "Mode",
            "type": "integer"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ProcessTypeId": {
            "description": "processtypeid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcessTypeId",
            "type": "string"
          }
        },
        "title": "ProcessInformationEntity",
        "type": "object"
      },
      "ProcessTypeEntity": {
        "description": "example of ProcessTypeEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ProcessId": {
            "description": "processid",
            "format": "uuid",
            "nullable": true,
            "title": "ProcessId",
            "type": "string"
          }
        },
        "title": "ProcessTypeEntity",
        "type": "object"
      },
      "ProvenInUseEntity": {
        "description": "example of ProvenInUseEntity",
        "properties": {
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DeviceSystematicCapability": {
            "description": "devicesystematiccapability",
            "nullable": true,
            "title": "DeviceSystematicCapability",
            "type": "string"
          },
          "DeviceUsage": {
            "description": "deviceusage",
            "nullable": true,
            "title": "DeviceUsage",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "NotApplicableRequirementsBasisRationale": {
            "description": "notapplicablerequirementsbasisrationale",
            "nullable": true,
            "title": "NotApplicableRequirementsBasisRationale",
            "type": "string"
          },
          "PreparingEngineer": {
            "description": "preparingengineer",
            "nullable": true,
            "title": "PreparingEngineer",
            "type": "string"
          },
          "ProjectManager": {
            "description": "projectmanager",
            "nullable": true,
            "title": "ProjectManager",
            "type": "string"
          },
          "Requirements": {
            "description": "requirements",
            "items": {
              "type": "object"
            },
            "title": "Requirements",
            "type": "array"
          },
          "Revision": {
            "description": "The user defined Revision",
            "nullable": true,
            "title": "Revision",
            "type": "string"
          }
        },
        "title": "ProvenInUseEntity",
        "type": "object"
      },
      "ReferenceEntity": {
        "description": "example of ReferenceEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "AutomaticRevision": {
            "description": "automaticrevision",
            "nullable": true,
            "title": "AutomaticRevision",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "Identifier": {
            "description": "The blob identifier",
            "nullable": true,
            "title": "Identifier",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Revision": {
            "description": "The user defined Revision",
            "nullable": true,
            "title": "Revision",
            "type": "string"
          },
          "RevisionDate": {
            "description": "revisiondate",
            "format": "date",
            "nullable": true,
            "title": "RevisionDate",
            "type": "string"
          },
          "TypeId": {
            "description": "typeid",
            "format": "uuid",
            "nullable": true,
            "title": "TypeId",
            "type": "string"
          }
        },
        "title": "ReferenceEntity",
        "type": "object"
      },
      "ReferenceTypeEntity": {
        "description": "example of ReferenceTypeEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "RegulatoryStandard": {
            "description": "regulatorystandard",
            "nullable": true,
            "title": "RegulatoryStandard",
            "type": "boolean"
          },
          "SystemResourceKey": {
            "description": "systemresourcekey",
            "nullable": true,
            "title": "SystemResourceKey",
            "type": "string"
          }
        },
        "title": "ReferenceTypeEntity",
        "type": "object"
      },
      "RepairTypeEntity": {
        "description": "example of RepairTypeEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "RepairTypeEntity",
        "type": "object"
      },
      "RoleEntity": {
        "description": "example of RoleEntity",
        "properties": {
          "AreaFilters": {
            "description": "areafilters",
            "items": {
              "format": "uuid",
              "type": "string"
            },
            "title": "AreaFilters",
            "type": "array"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "HasAllSiteAccess": {
            "description": "hasallsiteaccess",
            "nullable": true,
            "title": "HasAllSiteAccess",
            "type": "boolean"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "Permissions": {
            "description": "permissions",
            "nullable": true,
            "title": "Permissions",
            "type": "object"
          },
          "UserPrincipalName": {
            "description": "userprincipalname",
            "nullable": true,
            "title": "UserPrincipalName",
            "type": "string"
          }
        },
        "title": "RoleEntity",
        "type": "object"
      },
      "SafeguardCategoryEntity": {
        "description": "example of SafeguardCategoryEntity",
        "properties": {
          "AppliesTo": {
            "default": 1,
            "description": "appliesto",
            "enum": [
              1,
              2,
              4,
              8,
              16
            ],
            "format": "int32",
            "nullable": true,
            "title": "AppliesTo",
            "type": "integer"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Code": {
            "description": "The Code for the Configuration",
            "nullable": true,
            "title": "Code",
            "type": "string"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "nullable": true,
            "title": "DataCollection",
            "type": "object"
          },
          "DataCollectionConfigurationEntityId": {
            "description": "datacollectionconfigurationentityid",
            "format": "uuid",
            "nullable": true,
            "title": "DataCollectionConfigurationEntityId",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          }
        },
        "title": "SafeguardCategoryEntity",
        "type": "object"
      },
      "SynchronizationMetaDataEntity": {
        "description": "example of SynchronizationMetaDataEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DateApproved": {
            "description": "dateapproved",
            "format": "date-time",
            "nullable": true,
            "title": "DateApproved",
            "type": "string"
          },
          "DateCompleted": {
            "description": "datecompleted",
            "format": "date-time",
            "nullable": true,
            "title": "DateCompleted",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "Direction": {
            "default": 0,
            "description": "The direction of the synchronization",
            "enum": [
              0,
              1,
              2
            ],
            "format": "int32",
            "nullable": true,
            "title": "Direction",
            "type": "integer"
          },
          "EntitiesSynchronized": {
            "description": "entitiessynchronized",
            "nullable": true,
            "title": "EntitiesSynchronized",
            "type": "object"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "LogBlobId": {
            "description": "logblobid",
            "format": "uuid",
            "nullable": true,
            "title": "LogBlobId",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "ProcessingDuration": {
            "description": "processingduration",
            "nullable": true,
            "title": "ProcessingDuration",
            "type": "string"
          },
          "Settings": {
            "description": "The settings for the User",
            "nullable": true,
            "title": "Settings",
            "type": "object"
          },
          "SourceAppUri": {
            "description": "sourceappuri",
            "nullable": true,
            "title": "SourceAppUri",
            "type": "string"
          },
          "SourceBlobId": {
            "description": "sourceblobid",
            "format": "uuid",
            "nullable": true,
            "title": "SourceBlobId",
            "type": "string"
          },
          "SourceIPHost": {
            "description": "sourceiphost",
            "nullable": true,
            "title": "SourceIPHost",
            "type": "object"
          },
          "SourceKey": {
            "description": "sourcekey",
            "nullable": true,
            "title": "SourceKey",
            "type": "string"
          },
          "SourceVersion": {
            "description": "sourceversion",
            "nullable": true,
            "title": "SourceVersion",
            "type": "string"
          },
          "TargetAppUri": {
            "description": "targetappuri",
            "nullable": true,
            "title": "TargetAppUri",
            "type": "string"
          },
          "TargetIPHost": {
            "description": "targetiphost",
            "nullable": true,
            "title": "TargetIPHost",
            "type": "object"
          },
          "TargetKey": {
            "description": "targetkey",
            "nullable": true,
            "title": "TargetKey",
            "type": "string"
          },
          "TargetVersion": {
            "description": "targetversion",
            "nullable": true,
            "title": "TargetVersion",
            "type": "string"
          },
          "WorkflowState": {
            "default": 0,
            "description": "workflowstate",
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9
            ],
            "format": "int32",
            "nullable": true,
            "title": "WorkflowState",
            "type": "integer"
          }
        },
        "title": "SynchronizationMetaDataEntity",
        "type": "object"
      },
      "TagEntity": {
        "description": "example of TagEntity",
        "properties": {
          "AreaDeviceNodeId": {
            "description": "areadevicenodeid",
            "format": "uuid",
            "nullable": true,
            "title": "AreaDeviceNodeId",
            "type": "string"
          },
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "DataCollection": {
            "description": "datacollection",
            "nullable": true,
            "title": "DataCollection",
            "type": "object"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "PhysicalTagHierarchy": {
            "description": "physicaltaghierarchy",
            "nullable": true,
            "title": "PhysicalTagHierarchy",
            "type": "object"
          },
          "Profiles": {
            "description": "The profiles for this tag",
            "nullable": true,
            "title": "Profiles",
            "type": "object"
          },
          "Type": {
            "default": 1,
            "description": "Type of this Entity",
            "enum": [
              1,
              2,
              3,
              4,
              5
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          },
          "UnitOfMeasurementId": {
            "description": "unitofmeasurementid",
            "format": "uuid",
            "nullable": true,
            "title": "UnitOfMeasurementId",
            "type": "string"
          }
        },
        "title": "TagEntity",
        "type": "object"
      },
      "UnitOfMeasurementEntity": {
        "description": "example of UnitOfMeasurementEntity",
        "properties": {
          "AutogeneratedDescriptions": {
            "description": "autogenerateddescriptions",
            "nullable": true,
            "title": "AutogeneratedDescriptions",
            "type": "boolean"
          },
          "AutogeneratedNames": {
            "description": "autogeneratednames",
            "nullable": true,
            "title": "AutogeneratedNames",
            "type": "boolean"
          },
          "Comments": {
            "description": "Comments for the module",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Comments",
            "type": "array"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "Descriptions": {
            "description": "Collection of descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Descriptions",
            "type": "array"
          },
          "DisplayLabel": {
            "description": "displaylabel",
            "nullable": true,
            "title": "DisplayLabel",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "Names": {
            "description": "Collection of names in different languages",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Names",
            "type": "array"
          },
          "OrderOfMagnitude": {
            "description": "orderofmagnitude",
            "format": "int32",
            "nullable": true,
            "title": "OrderOfMagnitude",
            "type": "integer"
          },
          "OrderOfMagnitudeUSA": {
            "description": "orderofmagnitudeusa",
            "format": "int32",
            "nullable": true,
            "title": "OrderOfMagnitudeUSA",
            "type": "integer"
          },
          "Type": {
            "default": 1,
            "description": "Type of this Entity",
            "enum": [
              1,
              2,
              4,
              8,
              16,
              32,
              64,
              128,
              256,
              512,
              1024,
              2048,
              4096,
              8192,
              16384,
              32768,
              65536,
              131072,
              262144,
              524288,
              1048576,
              2097152,
              4194304,
              8388608,
              16777216,
              33554432,
              134217728,
              268435456
            ],
            "format": "int32",
            "nullable": true,
            "title": "Type",
            "type": "integer"
          },
          "UseScientificNotation": {
            "description": "usescientificnotation",
            "nullable": true,
            "title": "UseScientificNotation",
            "type": "boolean"
          }
        },
        "title": "UnitOfMeasurementEntity",
        "type": "object"
      },
      "UserEntity": {
        "description": "example of UserEntity",
        "properties": {
          "AccentColor": {
            "description": "accentcolor",
            "nullable": true,
            "title": "AccentColor",
            "type": "string"
          },
          "AddressId": {
            "description": "addressid",
            "format": "uuid",
            "nullable": true,
            "title": "AddressId",
            "type": "string"
          },
          "ContactNumber": {
            "description": "contactnumber",
            "nullable": true,
            "title": "ContactNumber",
            "type": "string"
          },
          "ContactPreference": {
            "default": 0,
            "description": "ContactPreference",
            "enum": [
              0,
              1,
              2,
              3
            ],
            "format": "int32",
            "nullable": true,
            "title": "ContactPreference",
            "type": "integer"
          },
          "CreatedAt": {
            "description": "createdat",
            "format": "date",
            "nullable": true,
            "title": "CreatedAt",
            "type": "string"
          },
          "CreatedBy": {
            "description": "createdby",
            "format": "uuid",
            "nullable": true,
            "title": "CreatedBy",
            "type": "string"
          },
          "CurrentAppContext": {
            "description": "currentappcontext",
            "format": "uuid",
            "nullable": true,
            "title": "CurrentAppContext",
            "type": "string"
          },
          "DateFormat": {
            "description": "dateformat",
            "nullable": true,
            "title": "DateFormat",
            "type": "string"
          },
          "Department": {
            "description": "The department of the User",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Department",
            "type": "array"
          },
          "EmailAddress": {
            "description": "emailaddress",
            "nullable": true,
            "title": "EmailAddress",
            "type": "string"
          },
          "EntityStatus": {
            "default": 0,
            "description": "entitystatus",
            "enum": [
              0,
              1,
              2,
              3,
              4
            ],
            "format": "int32",
            "nullable": true,
            "title": "EntityStatus",
            "type": "integer"
          },
          "EntityTag": {
            "description": "entitytag",
            "nullable": true,
            "title": "EntityTag",
            "type": "string"
          },
          "FamilyNames": {
            "description": "familynames",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "FamilyNames",
            "type": "array"
          },
          "GivenNames": {
            "description": "givennames",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "GivenNames",
            "type": "array"
          },
          "Id": {
            "description": "A UUID or GUID representing this Entity.",
            "format": "uuid",
            "nullable": true,
            "title": "Id",
            "type": "string"
          },
          "LockStatus": {
            "default": 0,
            "description": "lockstatus",
            "enum": [
              0,
              1
            ],
            "format": "int32",
            "nullable": true,
            "title": "LockStatus",
            "type": "integer"
          },
          "LockedBy": {
            "description": "lockedby",
            "format": "uuid",
            "nullable": true,
            "title": "LockedBy",
            "type": "string"
          },
          "MiddleNames": {
            "description": "middlenames",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "MiddleNames",
            "type": "array"
          },
          "ModifiedAt": {
            "description": "modifiedat",
            "format": "date",
            "nullable": true,
            "title": "ModifiedAt",
            "type": "string"
          },
          "ModifiedBy": {
            "description": "modifiedby",
            "format": "uuid",
            "nullable": true,
            "title": "ModifiedBy",
            "type": "string"
          },
          "OtherContactNumbers": {
            "description": "othercontactnumbers",
            "nullable": true,
            "title": "OtherContactNumbers",
            "type": "object"
          },
          "PrimaryLanguageISO639_2": {
            "description": "primarylanguageiso639_2",
            "nullable": true,
            "title": "PrimaryLanguageISO639_2",
            "type": "string"
          },
          "PrimaryTimeZoneName": {
            "description": "primarytimezonename",
            "nullable": true,
            "title": "PrimaryTimeZoneName",
            "type": "string"
          },
          "ProfileImageId": {
            "description": "profileimageid",
            "format": "uuid",
            "nullable": true,
            "title": "ProfileImageId",
            "type": "string"
          },
          "Region": {
            "description": "The Region used for displaying numbers and values",
            "nullable": true,
            "title": "Region",
            "type": "string"
          },
          "ServiceRegionId": {
            "description": "serviceregionid",
            "format": "uuid",
            "nullable": true,
            "title": "ServiceRegionId",
            "type": "string"
          },
          "Settings": {
            "description": "The settings for the User",
            "nullable": true,
            "title": "Settings",
            "type": "object"
          },
          "SidebarExpanded": {
            "description": "sidebarexpanded",
            "nullable": true,
            "title": "SidebarExpanded",
            "type": "boolean"
          },
          "TeamContactId": {
            "description": "teamcontactid",
            "format": "uuid",
            "nullable": true,
            "title": "TeamContactId",
            "type": "string"
          },
          "ThemeId": {
            "description": "themeid",
            "nullable": true,
            "title": "ThemeId",
            "type": "string"
          },
          "TimeFormat": {
            "description": "timeformat",
            "nullable": true,
            "title": "TimeFormat",
            "type": "string"
          },
          "Title": {
            "description": "The title of the User",
            "items": {
              "$ref": "#/components/schemas/LocalizedText"
            },
            "title": "Title",
            "type": "array"
          },
          "UnitId": {
            "description": "unitid",
            "nullable": true,
            "title": "UnitId",
            "type": "string"
          },
          "UserPrincipalName": {
            "description": "userprincipalname",
            "nullable": true,
            "title": "UserPrincipalName",
            "type": "string"
          }
        },
        "title": "UserEntity",
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearer_auth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  }
}